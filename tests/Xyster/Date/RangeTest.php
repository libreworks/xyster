<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Date
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace Xyster\Date;
/**
 * Test class for Xyster_Date_Range.
 * Generated by PHPUnit on 2008-05-05 at 16:13:45.
 */
class RangeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var    Range
     */
    protected $object;
    /**
     * @var \Zend_Date
     */
    protected $_start;
    /**
     * @var \Zend_Date
     */
    protected $_end;
        
    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->_start = new \Zend_Date(strtotime('-67 days'));
        $this->_end = new \Zend_Date();
        $this->object = new Range($this->_start, $this->_end);
    }
    
    /**
     * Tries constructing a range with flipped start and end dates
     * @expectedException \Zend_Date_Exception
     */
    public function testInvalidRange()
    {
        $test = new Range($this->_end, $this->_start);
    }
    
    /**
     * Tests the 'getStart' method
     *
     */
    public function testGetStart()
    {
        $this->assertEquals($this->_start, $this->object->getStart());
    }
    
    /**
     * Tests the 'getEnd' method
     *
     */
    public function testGetEnd()
    {
        $this->assertEquals($this->_end, $this->object->getEnd());
    }
    
    /**
     * Tests the 'getTimespan' method
     *
     */
    public function testGetTimespan()
    {
        $span = $this->object->getTimespan();
        $clone = clone $this->_end;
        $span2 = $clone->sub($this->_start);
        $this->assertEquals($span2, $span);
    }
    
    /**
     * Tests the 'isWithin' method
     *
     */
    public function testIsWithin()
    {
        $within = new \Zend_Date(strtotime('-38 days'));
        $within2 = new \Zend_Date(strtotime('-67 days'));
        $notWithin = new \Zend_Date(strtotime('-68 days'));
        $notWithin2 = new \Zend_Date(strtotime('next week'));
        $this->assertTrue($this->object->isWithin($within));
        $this->assertTrue($this->object->isWithin($within2));
        $this->assertFalse($this->object->isWithin($notWithin));
        $this->assertFalse($this->object->isWithin($notWithin2));
    }
    
    /**
     * Tests the 'toString' method
     *
     */
    public function testToString()
    {
        // the dash is really an En Dash (U+2013)
        $this->assertEquals($this->_start . 'â€“' . $this->_end, $this->object->__toString());
    }
}
