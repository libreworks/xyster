<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Collection
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Collection;
use Xyster\Collection\FixedList;
/**
 * Test class for Xyster_Collection_List_Fixed.
 * Generated by PHPUnit on 2008-07-16 at 13:34:27.
 */
class FixedListTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var    FixedList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $list = new \Xyster\Collection\ArrayList;
        $list->add('123');
        $list->add('456');
        $this->object = new FixedList($list);
    }

    /**
     * Tests the 'get' method
     */
    public function testGet()
    {
        $this->assertEquals('456', $this->object->get(1));
    }

    /**
     * Tests the 'indexOf' method
     */
    public function testIndexOf()
    {
        $this->assertEquals(1, $this->object->indexOf('456'));
    }

    /**
     * Tests the 'insert' method
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testInsert()
    {
        $this->object->insert(0, 'aoeu');
    }

    /**
     * Tests the 'insertAll' method
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testInsertAll()
    {
        $this->object->insertAll(0, new \Xyster\Collection\ArrayList);
    }

    /**
     * Tests the 'offsetExists' method
     */
    public function testOffsetExists()
    {
        $this->assertTrue($this->object->offsetExists(1));
    }

    /**
     * Tests the 'offsetGet' method
     */
    public function testOffsetGet()
    {
        $this->assertEquals('123', $this->object->offsetGet(0));
    }

    /**
     * Tests the 'offsetSet'
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testOffsetSet()
    {
        $this->object->offsetSet(0, 'aoeu');
    }

    /**
     * Tests the 'offsetUnset' method
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testOffsetUnset()
    {
        $this->object->offsetUnset(0);
    }

    /**
     * Tests the 'removeAt' method
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testRemoveAt()
    {
        $this->object->removeAt(0);
    }

    /**
     * Tests the 'set' method
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testSet()
    {
        $this->object->set(0, 'aoeu');
    }

    /**
     * Tests the 'slice' method
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testSlice()
    {
        $this->object->slice(0, 1);
    }
}
