<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Collection
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Collection_DelegateTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Collection_DelegateTest::main');
}
require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Collection/Delegate.php';
require_once 'Xyster/Collection.php';

/**
 * Test class for Xyster_Collection_Delegate.
 * Generated by PHPUnit on 2008-07-16 at 13:10:17.
 */
class Xyster_Collection_DelegateTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Xyster_Collection_Delegate
     */
    protected $object;

    /**
     * @var Xyster_Collection
     */
    protected $coll;
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Collection_DelegateTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->coll = new Xyster_Collection;
        $this->coll->add('foobar');
        $this->coll->add('testing 123');
        $this->coll->add('lorem ipsum');
        $this->object = new Xyster_Collection_Delegate($this->coll);
    }

    /**
     * Tests the 'add' method
     */
    public function testAdd()
    {
        $this->assertTrue($this->object->add('foobar-2'));
        $this->assertTrue($this->coll->contains('foobar-2'));
    }

    /**
     * Tests the 'clear' method
     */
    public function testClear()
    {
        $this->assertEquals(3, $this->object->count());
        $this->object->clear();
        $this->assertEquals(0, $this->coll->count());
    }

    /**
     * Tests the 'count' method
     */
    public function testCount()
    {
        $this->assertEquals(3, $this->object->count());
    }

    /**
     * Tests the 'getIterator' method
     */
    public function testGetIterator()
    {
        $this->assertType("Iterator", $this->object->getIterator());
    }

    /**
     * Tests the 'contains' method
     */
    public function testContains()
    {
        $this->assertTrue($this->object->contains('foobar'));
        $this->assertFalse($this->object->contains('not-there'));
    }

    /**
     * Tests the 'containsAll' method
     */
    public function testContainsAll()
    {
        $coll = new Xyster_Collection;
        $coll->add('not-there');
        $coll->add('foobar');
        $this->assertFalse($this->object->containsAll($coll));
        $coll = new Xyster_Collection;
        $coll->add('foobar');
        $this->assertTrue($this->object->containsAll($coll));
    }

    /**
     * Tests the 'containsAny' method
     */
    public function testContainsAny()
    {
        $coll = new Xyster_Collection;
        $coll->add('not-there');
        $coll->add('foobar');
        $this->assertTrue($this->object->containsAny($coll));
        $coll = new Xyster_Collection;
        $coll->add('not-there-2');
        $this->assertFalse($this->object->containsAny($coll));
    }

    /**
     * Tests the 'isEmpty' method
     */
    public function testIsEmpty()
    {
        $this->coll->clear();
        $this->assertTrue($this->object->isEmpty());
        $this->coll->add('123');
        $this->assertFalse($this->object->isEmpty());
    }

    /**
     * Tests the 'merge' method
     */
    public function testMerge()
    {
        $coll = new Xyster_Collection;
        $coll->add('spatula');
        $coll->add('chainsaw');
        $this->assertTrue($this->object->merge($coll));
        $this->assertEquals(5, count($this->coll));
        $this->assertTrue($this->coll->contains('spatula'));
        $this->assertTrue($this->coll->contains('chainsaw'));
    }

    /**
     * Tests the 'remove' method
     */
    public function testRemove()
    {
        $this->assertTrue($this->object->remove('foobar'));
        $this->assertFalse($this->coll->contains('foobar'));
        $this->assertEquals(2, count($this->coll));
    }

    /**
     * Tests the 'removeAll' method
     */
    public function testRemoveAll()
    {
        $coll = new Xyster_Collection();
        $coll->add('foobar');
        $this->assertTrue($this->object->removeAll($coll));
        $this->assertFalse($this->coll->contains('foobar'));
        $this->assertEquals(2, count($this->coll));
    }

    /**
     * Tests the 'retainAll' method
     */
    public function testRetainAll()
    {
        $coll = new Xyster_Collection();
        $coll->add('foobar');
        $this->assertTrue($this->object->retainAll($coll));
        $this->assertEquals(1, count($this->coll));
    }

    /**
     * Tests the 'toArray' method
     */
    public function testToArray()
    {
        $result = $this->object->toArray();
        $this->assertSame($this->coll->toArray(), $result);
    }
}

// Call Xyster_Collection_DelegateTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Collection_DelegateTest::main') {
    Xyster_Collection_DelegateTest::main();
}
