<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Collection
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id: EmptyListTest.php 418 2010-10-18 21:40:08Z jonathanhawk $
 */
namespace XysterTest\Collection;
use Xyster\Collection\EmptyMap;
/**
 * Test class for EmptyMap.
 * Generated by PHPUnit on 2011-02-08 at 19:52:54.
 */
class EmptyMapTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var EmptyMap
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EmptyMap;
    }

    /**
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testClear()
    {

        $this->object->clear();
    }

    /**
     * Tests 'containsKey'
     */
    public function testContainsKey()
    {
        $this->assertFalse($this->object->containsKey("foo"));
    }

    /**
     * Tests 'containsValue'
     */
    public function testContainsValue()
    {
        $this->assertFalse($this->object->containsValue("bar"));
    }

    /**
     * Tests 'count'
     */
    public function testCount()
    {
        $this->assertEquals(0, count($this->object));
    }

    /**
     * Tests 'get'
     */
    public function testGet()
    {
        $this->assertNull($this->object->get("foo"));
    }

    /**
     * Tests 'getIterator'
     */
    public function testGetIterator()
    {
        $this->assertType('EmptyIterator', $this->object->getIterator());
    }

    /**
     * Tests 'isEmpty'
     */
    public function testIsEmpty()
    {
        $this->assertTrue($this->object->isEmpty());
    }

    /**
     * Tests 'keys'
     */
    public function testKeys()
    {
        $this->assertType('Xyster\Collection\EmptyList', $this->object->keys());
    }

    /**
     * Tests 'keyFor'
     */
    public function testKeyFor()
    {
        $this->assertType('Xyster\Collection\EmptyList', $this->object->keysFor("abc"));
    }

    /**
     * Tests 'keysFor'
     */
    public function testKeysFor()
    {
        $this->assertType('Xyster\Collection\EmptyList', $this->object->keysFor('foo'));
    }

    /**
     * Tests 'merge'
     *
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testMerge()
    {
        $this->object->merge($this->object);
    }

    /**
     * Tests 'offsetExists'
     */
    public function testOffsetExists()
    {
        $this->assertFalse($this->object->offsetExists("abc"));
    }

    /**
     * Tests 'offsetGet'
     */
    public function testOffsetGet()
    {
        $this->assertNull($this->object->offsetGet("foo"));
    }

    /**
     * Tests 'offsetSet'
     *
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testOffsetSet()
    {
        $this->object->offsetSet('a', 'b');
    }

    /**
     * Tests 'offsetUnset'
     *
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testOffsetUnset()
    {
        $this->object->offsetUnset('a');
    }

    /**
     * Tests 'remove'
     *
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testRemove()
    {
        $this->object->remove("foo");
    }

    /**
     * Tests 'set'
     *
     * @expectedException \Xyster\Collection\UnmodifiableException
     */
    public function testSet()
    {
        $this->object->set("foo", "bar");
    }

    /**
     * Tests 'toArray'
     */
    public function testToArray()
    {
        $this->assertEquals(array(), $this->object->toArray());
    }

    /**
     * Tests 'values'
     */
    public function testValues()
    {
        $this->assertType('Xyster\Collection\EmptyList', $this->object->values());
    }
}
