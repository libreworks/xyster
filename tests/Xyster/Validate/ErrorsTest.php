<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Validate
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Validate_ErrorsTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Validate_ErrorsTest::main');
}

require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';

require_once "PHPUnit/Framework.php";
require_once 'Xyster/Validate/Errors.php';
require_once 'Zend/Filter/Input.php';
require_once 'Zend/Validate/Digits.php';

/**
 * Test class for Xyster_Validate_Errors.
 * Generated by PHPUnit on 2007-10-03 at 16:03:24.
 */
class Xyster_Validate_ErrorsTest extends PHPUnit_Framework_TestCase
{   
    /**
     * @var Xyster_Validate_Errors
     */ 
    public $errors;
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Validate_ErrorsTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }
    
    /**
     * Sets up the test
     *
     */
    protected function setUp()
    {
        $this->errors = new Xyster_Validate_Errors();
    }

    /**
     * Tests the add method
     *
     */
    public function testAdd()
    {
        $error = new Xyster_Validate_Error('Test message', 'field1');

        $this->assertFalse($this->errors->hasErrors());
        $return = $this->errors->add($error);
        $this->assertTrue($return);
        $this->assertTrue($this->errors->contains($error));
        $this->assertTrue($this->errors->hasErrors());
    }
    
    /**
     * Tests the addError method
     *
     */
    public function testAddError()
    {
        $this->assertFalse($this->errors->hasErrors());
        
        $this->errors->addError('My message', 'fieldName');
        
        $this->assertTrue($this->errors->hasErrors());
        $this->assertType('Xyster_Validate_Error', $this->errors->getError('fieldName'));
    }
    
    /**
     * Tests the add method fails with wrong type
     *
     */
    public function testAddInvalid()
    {
        $this->setExpectedException('Zend_Validate_Exception');
        $this->errors->add('Incorrect type');
    }
    
    /**
     * Tests the addFilterInputMessages method
     *
     */
    public function testAddFilterInputMessages()
    {
        $data = array('field1' => 'ABCD123');
        $filter = new Zend_Filter_Input(null, array('field1'=>'Digits'), $data);

        $this->assertFalse($this->errors->hasErrors());
        
        $this->errors->addFilterInputMessages($filter);
        
        $this->assertTrue($this->errors->hasErrors());
    }
    
    /**
     * Tests the addValidateMessages method
     *
     */
    public function testAddValidateMessages()
    {
        $validator = new Zend_Validate_Digits();
        $validator->isValid('ABCD123');
        
        $this->assertFalse($this->errors->hasErrors());
        
        $this->errors->addValidateMessages($validator);
        
        $this->assertTrue($this->errors->hasErrors());
    }
    
    /**
     * Tests the getError method
     *
     */
    public function testGetError()
    {
        $error = new Xyster_Validate_Error('Test message', 'field1');
        $error2 = new Xyster_Validate_Error('Test message again', 'field2');
        
        $this->errors->add($error);
        $this->errors->add($error2);
        
        $returnError = $this->errors->getError('field2');
        $this->assertSame($error2, $returnError);
        
        $returnError2 = $this->errors->getError('field-does-not-exist');
        $this->assertNull($returnError2);
    }
    
    /**
     * Tests the 'getFields' method
     *
     */
    public function testGetFields()
    {
        $error = new Xyster_Validate_Error('Test message', 'field1');
        $error2 = new Xyster_Validate_Error('Test message again', 'field2');
        $error3 = new Xyster_Validate_Error('Test message still', 'field3');
        $error4 = new Xyster_Validate_Error('Test message continues', 'field2');
        
        $this->errors->add($error);
        $this->errors->add($error2);
        $this->errors->add($error3);
        $this->errors->add($error4);
        
        $fields = $this->errors->getFields();
        $this->assertEquals(array('field1', 'field2', 'field3'), $fields);
    }
}

// Call Xyster_Validate_ErrorsTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Validate_ErrorsTest::main') {
    Xyster_Validate_ErrorsTest::main();
}
