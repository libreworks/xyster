<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Validate
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Validate;
use Xyster\Validate\Errors;
use Xyster\Validate\Error;
/**
 * Test class for Xyster_Validate_Errors.
 * Generated by PHPUnit on 2007-10-03 at 16:03:24.
 */
class ErrorsTest extends \PHPUnit_Framework_TestCase
{   
    /**
     * @var Errors
     */ 
    public $errors;
    
    /**
     * Sets up the test
     *
     */
    protected function setUp()
    {
        $this->errors = new Errors();
    }

    /**
     * Tests the add method
     *
     */
    public function testAdd()
    {
        $error = new Error('Test message', 'field1');

        $this->assertFalse($this->errors->hasErrors());
        $return = $this->errors->add($error);
        $this->assertTrue($return);
        $this->assertTrue($this->errors->contains($error));
        $this->assertTrue($this->errors->hasErrors());
    }
    
    /**
     * Tests the addError method
     *
     */
    public function testAddError()
    {
        $this->assertFalse($this->errors->hasErrors());
        
        $this->errors->addError('My message', 'fieldName');
        
        $this->assertTrue($this->errors->hasErrors());
        $this->assertType('\Xyster\Validate\Error', $this->errors->getError('fieldName'));
    }
    
    /**
     * Tests the add method fails with wrong type
     * @expectedException \Zend_Validate_Exception
     */
    public function testAddInvalid()
    {
        $this->errors->add('Incorrect type');
    }
    
    /**
     * Tests the addFilterInputMessages method
     *
     */
    public function testAddFilterInputMessages()
    {
        $data = array('field1' => 'ABCD123');
        $filter = new \Zend_Filter_Input(null, array('field1'=>'Digits'), $data);

        $this->assertFalse($this->errors->hasErrors());
        
        $this->errors->addFilterInputMessages($filter);
        
        $this->assertTrue($this->errors->hasErrors());
    }
    
    /**
     * Tests the addValidateMessages method
     *
     */
    public function testAddValidateMessages()
    {
        $validator = new \Zend_Validate_Digits();
        $validator->isValid('ABCD123');
        
        $this->assertFalse($this->errors->hasErrors());
        
        $this->errors->addValidateMessages($validator);
        
        $this->assertTrue($this->errors->hasErrors());
    }
    
    /**
     * Tests the getError method
     *
     */
    public function testGetError()
    {
        $error = new Error('Test message', 'field1');
        $error2 = new Error('Test message again', 'field2');
        
        $this->errors->add($error);
        $this->errors->add($error2);
        
        $returnError = $this->errors->getError('field2');
        $this->assertSame($error2, $returnError);
        
        $returnError2 = $this->errors->getError('field-does-not-exist');
        $this->assertNull($returnError2);
    }
    
    /**
     * Tests the 'getFields' method
     *
     */
    public function testGetFields()
    {
        $error = new Error('Test message', 'field1');
        $error2 = new Error('Test message again', 'field2');
        $error3 = new Error('Test message still', 'field3');
        $error4 = new Error('Test message continues', 'field2');
        
        $this->errors->add($error);
        $this->errors->add($error2);
        $this->errors->add($error3);
        $this->errors->add($error4);
        
        $fields = $this->errors->getFields();
        $this->assertEquals(array('field1', 'field2', 'field3'), $fields);
    }
}
