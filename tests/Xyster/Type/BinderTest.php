<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Data
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Type;
use Xyster\Type\Binder;
/**
 * Test class for Xyster_Data_Binder.
 * Generated by PHPUnit on 2008-05-06 at 20:45:04.
 */
class BinderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var    Binder
     */
    protected $object;

    protected $target;

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->target = new \stdClass;
        $this->object = new Binder($this->target);
    }
    
    /**
     * Tests the constructor
     * @expectedException \Xyster\Type\InvalidTypeException
     */
    public function testBadConstruct()
    {
        $test = new Binder($this->target, new \Xyster\Type\Type('string'));
    }
    
    /**
     * Tests the 'addSetter' method
     */
    public function testAddSetter()
    {
        $setter = new BinderTest_Setter('here');
        $return = $this->object->addSetter($setter, 'here');
        $this->assertSame($this->object, $return);
        $values = array('foo' => 'bar', 'this' => 'that', 'here' => 'there');
        $this->object->bind($values);
        $this->assertEquals(1, $setter->called);
    }
    
    /**
     * Tests the 'bind' method
     */
    public function testBind()
    {
        $this->object->setAllowedFields(array('foo', 'here'));
        $values = array('foo' => 'bar', 'this' => 'that', 'here' => 'there');
        $this->object->bind($values);
        $this->assertEquals('bar', $this->target->foo);
        $this->assertEquals('there', $this->target->here);
        $this->assertObjectNotHasAttribute('this', $this->target);
    }

    /**
     * Tests the 'getTarget' method
     */
    public function testGetTarget()
    {
        $this->assertSame($this->target, $this->object->getTarget());
    }

    /**
     * Tests the 'isAllowed' method
     */
    public function testIsAllowed()
    {
        $this->object->setAllowedFields(array('foo', 'bar'));
        $this->assertTrue($this->object->isAllowed('foo'));
        $this->assertTrue($this->object->isAllowed('bar'));
        $this->assertFalse($this->object->isAllowed('test'));
        
        $this->object->setDisallowedFields(array('foo', 'silly'));
        $this->assertFalse($this->object->isAllowed('foo'));
        $this->assertFalse($this->object->isAllowed('silly'));
        $this->assertTrue($this->object->isAllowed('bar'));
        $this->assertTrue($this->object->isAllowed('test'));
    }

    /**
     * Tests the allowed fields methods 
     */
    public function testGetAndSetAllowedFields()
    {
        $fields = array('foo', 'bar', 'foobar');
        $return = $this->object->setAllowedFields($fields);
        $this->assertSame($this->object, $return);
        $this->assertEquals($fields, $this->object->getAllowedFields());
    }

    /**
     * Tests the disallowed fields methods
     */
    public function testGetAndSetDisallowedFields()
    {
        $fields = array('foo', 'bar', 'foobar');
        $return = $this->object->setDisallowedFields($fields);
        $this->assertSame($this->object, $return);
        $this->assertEquals($fields, $this->object->getDisallowedFields());
    }
}

class BinderTest_Setter implements \Xyster\Type\Property\IProperty
{
    public $called = 0;
    public $field;
    
    public function __construct($field)
    {
        $this->field = $field;
    }
    
    public function get($target)
    {
        
    }
    
    public function set($target, $value)
    {
        $this->called++;
        $target->{$this->field} = $value;
    }
}
