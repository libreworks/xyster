<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Container\Injector;
use Xyster\Container\Provider\Proxy;
require_once dirname(dirname(__FILE__)) . '/_files/Sdi.php';

/**
 * Test class for Proxy.
 * Generated by PHPUnit on 2011-02-13 at 19:42:21.
 */
class ProxyTest extends \PHPUnit_Framework_TestCase implements \Xyster\Type\Proxy\IHandler
{
    /**
     * @var Proxy
     */
    protected $object;
    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    protected $injector;

    protected $called = 0;

    /**
     * Sets up the fixture, for example, opens a network connection.
     */
    protected function setUp()
    {
        $type = new \Xyster\Type\Type('\XysterTest\Container\RocketShip');
        $this->injector = $this->getMockForAbstractClass('\Xyster\Container\Injector\AbstractInjector', array($type, 'myName'));
        $this->object = new Proxy($this->injector, $this);
    }

    /**
     * Tests the get method
     */
    public function testGet()
    {
        $into = new \Xyster\Type\Type('ArrayObject');
        $rocket = new \XysterTest\Container\RocketShip();
        $container = $this->getMock('\Xyster\Container\IContainer');
        $this->injector->expects($this->once())
            ->method('get')
            ->with($container, $into)
            ->will($this->returnValue($rocket));
        $proxy = $this->object->get($container, $into);
        $this->assertType('\XysterTest\Container\RocketShip', $proxy);
        $this->assertType('\Xyster\Type\Proxy\IProxy', $proxy);
        $this->assertEquals(0, $this->called);
        $proxy->getFuel();
        $this->assertEquals(1, $this->called);
    }

    /**
     * Tests the getLabel method
     */
    public function testToString()
    {
        $this->injector->expects($this->any())
            ->method('getLabel')
            ->will($this->returnValue('MyLabel'));
        $this->assertEquals('Proxy:MyLabel:myName', $this->object->__toString());
    }

    public function invoke($object, \ReflectionMethod $called, array $args, $delegate, \ReflectionMethod $parent = null)
    {
        $this->called++;
    }
}
