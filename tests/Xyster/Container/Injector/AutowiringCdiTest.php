<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Container/Injector/Autowiring.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Autowire.php';
require_once 'Xyster/Container/_files/Cdi.php';

/**
 * Test class for Xyster_Container_Injector_Autowiring.
 * Generated by PHPUnit on 2009-06-15 at 09:01:33.
 */
class Xyster_Container_Injector_AutowiringCdiTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container_Injector_Autowiring
     */
    protected $object;

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Container_Injector_Autowiring(
            Xyster_Container::definition('Submarine'),
            Xyster_Container_Autowire::Constructor());
    }

    public function testConstructor()
    {
        $injector = new Xyster_Container_Injector_Autowiring(Xyster_Container::definition('ScubaGear'));
        self::assertAttributeEquals(Xyster_Container_Autowire::None(), '_autowire', $injector);
    }
    
    public function testGet()
    {
        $container = new Xyster_Container();
        $container->add(Xyster_Container::definition('SubmarineCaptain')
            ->constructorArg('ScubaGear'))
            ->add(new Xyster_Container_Definition('SubFuel'))
            ->add(new Xyster_Container_Definition('ScubaGear'));
        
        $object = $this->object->get($container);
        self::assertType('Submarine', $object);
    }

    public function testGetNone()
    {
        $container = new Xyster_Container();
        $this->setExpectedException('Xyster_Container_Injector_Exception', 'Cannot inject method argument capn into Submarine: no matching types were found in the container');
        $object = $this->object->get($container);
    }
    
    public function testGetMulti()
    {
        $container = new Xyster_Container();
        $container->add(Xyster_Container::definition('SubmarineCaptain', 'capn1')
            ->constructorArg('ScubaGear'))
            ->add(new Xyster_Container_Definition('SubFuel'))
            ->add(new Xyster_Container_Definition('ScubaGear'))
            ->add(Xyster_Container::definition('SubmarineCaptain', 'capn2')
            ->constructorArg('ScubaGear'));
        $this->setExpectedException('Xyster_Container_Injector_Exception', 'Cannot inject method argument capn into Submarine: more than one value is available in the container');
        $object = $this->object->get($container);
    }
    
    public function testGetMultiNamed()
    {
        $container = new Xyster_Container();
        $container->add(Xyster_Container::definition('SubmarineCaptain', 'capn')
            ->constructorArg('ScubaGear'))
            ->add(new Xyster_Container_Definition('SubFuel'))
            ->add(new Xyster_Container_Definition('ScubaGear'))
            ->add(Xyster_Container::definition('SubmarineCaptain', 'firstMate')
            ->constructorArg('ScubaGear'));
        $object = $this->object->get($container);
        self::assertType('Submarine', $object);
    }
    
    public function testGetScalar()
    {
        $injector = new Xyster_Container_Injector_Autowiring(Xyster_Container::definition('Xyster_Type'), Xyster_Container_Autowire::Constructor());
        $this->setExpectedException('Xyster_Container_Injector_Exception', 'Cannot inject method argument type into Xyster_Type: non-object parameters cannot be autowired');
        $injector->get(new Xyster_Container());
    }
    
    public function testGetNoArg()
    {
        $injector = new Xyster_Container_Injector_Autowiring(Xyster_Container::definition('ScubaGear'), Xyster_Container_Autowire::Constructor());
        $object = $injector->get(new Xyster_Container());
        self::assertType('ScubaGear', $object);
    }
    
    public function testGetLabel()
    {
        self::assertEquals('Autowiring', $this->object->getLabel());
    }
}
