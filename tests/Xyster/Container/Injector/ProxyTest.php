<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Container\Injector;
use Xyster\Container\Injector\Proxy;
require_once dirname(dirname(__FILE__)) . '/_files/Sdi.php';

/**
 * Test class for Proxy.
 * Generated by PHPUnit on 2011-02-13 at 19:42:21.
 */
class ProxyTest extends \PHPUnit_Framework_TestCase implements \Xyster\Type\Proxy\IHandler
{
    /**
     * @var Proxy
     */
    protected $object;
    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    protected $injector;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $type = new \Xyster\Type\Type('\XysterTest\Container\RocketShip');
        $this->injector = $this->getMockForAbstractClass('\Xyster\Container\Injector\AbstractInjector', array($type, 'myName'));
        $this->object = new Proxy($this, $this->injector);
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetLabel().
     */
    public function testGetLabel()
    {
        $this->injector->expects($this->any())
            ->method('getLabel')
            ->will($this->returnValue('MyLabel'));
        $this->assertEquals('Proxy:MyLabel', $this->object->getLabel());
    }

    /**
     * Tests the validate() method.
     */
    public function testValidate()
    {
        $container = $this->getMock('\Xyster\Container\IContainer');
        $this->injector->expects($this->any())
            ->method('validate')
            ->with($this->equalTo($container));
        $this->object->validate($container);
    }

    public function invoke($object, \ReflectionMethod $called, array $args, \ReflectionMethod $parent = null)
    {

    }
}
