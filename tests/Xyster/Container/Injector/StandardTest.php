<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Container\Injector;
use Xyster\Container\Injector\Standard;
use Xyster\Container\Definition;
use Xyster\Container\Container;
require_once dirname(dirname(__FILE__)) . '/_files/Cdi.php';

/**
 * Test class for Standard.
 * Generated by PHPUnit on 2009-06-10 at 19:16:21.
 */
class StandardTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var    Standard
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $def = new Definition('\XysterTest\Container\Submarine');
        $def->constructorArg('XysterTest\Container\SubmarineCaptain')
            ->constructorArg('XysterTest\Container\SubFuel')
            ->constructorArg(array('XysterTest\Container\Sailor1', 'XysterTest\Container\Sailor2'))
            ->property('location', 'Somewhere')
            ->property('name', 'USS Enterprise');
        $this->object = new Standard($def);
    }

    public function testGet()
    {
        $def = new Definition('\XysterTest\Container\SubmarineCaptain');
        $def->constructorArg('XysterTest\Container\ScubaGear');
        $def->initMethod('navigate');
        $container = new Container();
        $container->add($def)
            ->add(new Definition('\XysterTest\Container\SubFuel'))
            ->add(new Definition('\XysterTest\Container\ScubaGear'));
        $object = $this->object->get($container);
        self::assertType('\XysterTest\Container\Submarine', $object);
        self::assertAttributeEquals(new \XysterTest\Container\SubFuel(), '_fuel', $object);
        self::assertType('\XysterTest\Container\SubmarineCaptain', $object->getCaptain());
        self::assertAttributeEquals('USS Enterprise', '_name', $object);
        self::assertAttributeEquals('Somewhere', '_location', $object);
        self::assertAttributeEquals($container, '_container', $object->getCaptain());
        self::assertAttributeEquals(true, '_navigated', $object->getCaptain());
        $object2 = $this->object->get($container);
        self::assertNotSame($object2, $object);
        self::assertEquals($object2, $object);
    }

    /**
     * @expectedException \Xyster\Container\Injector\Exception
     */
    public function testGetBad()
    {
        //$this->setExpectedException('Xyster_Container_Injector_Exception', 'Cannot inject method argument capn into Submarine: key not found in the container: SubmarineCaptain');
        $this->object->get(new Container());
    }

    /**
     * @expectedException \Xyster\Container\Injector\Exception
     */
    public function testGetBad2()
    {
        //$this->setExpectedException('Xyster_Container_Injector_Exception', 'The number of required method parameters must equal the number of arguments provided');
        $def = new Definition('\XysterTest\Container\Submarine');
        $def->constructorArg('\XysterTest\Container\SubmarineCaptain');
        $object = new Standard($def);
        $object->get(new Container());
    }
    
    public function testGetName()
    {
        self::assertEquals('XysterTest\Container\Submarine', $this->object->getName());
    }
    
    public function testGetType()
    {
        self::assertEquals(new \Xyster\Type\Type('\XysterTest\Container\Submarine'), $this->object->getType());
    }

    public function testGetLabel()
    {
        self::assertEquals('Injector', $this->object->getLabel());
    }

    /**
     * @expectedException \Xyster\Container\Injector\Exception
     */
    public function testConstructAbstract()
    {
//        $this->setExpectedException('Xyster_Container_Injector_Exception', 'Xyster_Container_Injector_AbstractInjector is not a concrete class');
        new Standard(new Definition('\Xyster\Container\Injector\AbstractInjector'));
    }
    
    public function testToString()
    {
        self::assertEquals('Injector:XysterTest\Container\Submarine', $this->object->__toString());
    }

    /**
     * @expectedException \Xyster\Container\Injector\Exception
     */
    public function testValidateError1()
    {
        $this->object->validate(new Container());
    }
    
    public function testValidate()
    {
        $def = new Definition('\XysterTest\Container\SubmarineCaptain');
        $def->constructorArg('XysterTest\Container\ScubaGear');
        $container = new Container();
        $container->add($def)
            ->add(new Definition('\XysterTest\Container\SubFuel'))
            ->add(new Definition('\XysterTest\Container\ScubaGear'));
        $this->object->validate($container);
    }
}
