<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Db
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Db_DataTypeTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Db_DataTypeTest::main');
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";
require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Db/DataType.php';

/**
 * Test class for Xyster_Db_DataType.
 * Generated by PHPUnit on 2008-03-12 at 20:28:24.
 */
class Xyster_Db_DataTypeTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Db_DataTypeTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Tests a method
     */
    public function testVarchar()
    {
        $enum = Xyster_Db_DataType::Varchar();
        $this->_runTests($enum, 'Varchar', 0);
    }

    /**
     * Tests a method
     */
    public function testChar()
    {
        $enum = Xyster_Db_DataType::Char();
        $this->_runTests($enum, 'Char', 1);
    }

    /**
     * Tests a method
     */
    public function testInteger()
    {
        $enum = Xyster_Db_DataType::Integer();
        $this->_runTests($enum, 'Integer', 2);
    }

    /**
     * Tests a method
     */
    public function testSmallint()
    {
        $enum = Xyster_Db_DataType::Smallint();
        $this->_runTests($enum, 'Smallint', 3);
    }

    /**
     * Tests a method
     */
    public function testFloat()
    {
        $enum = Xyster_Db_DataType::Float();
        $this->_runTests($enum, 'Float', 4);
    }

    /**
     * Tests a method
     */
    public function testTimestamp()
    {
        $enum = Xyster_Db_DataType::Timestamp();
        $this->_runTests($enum, 'Timestamp', 5);
    }

    /**
     * Tests a method
     */
    public function testDate()
    {
        $enum = Xyster_Db_DataType::Date();
        $this->_runTests($enum, 'Date', 6);
    }

    /**
     * Tests a method
     */
    public function testTime()
    {
        $enum = Xyster_Db_DataType::Time();
        $this->_runTests($enum, 'Time', 7);
    }

    /**
     * Tests a method
     */
    public function testClob()
    {
        $enum = Xyster_Db_DataType::Clob();
        $this->_runTests($enum, 'Clob', 8);
    }

    /**
     * Tests a method
     */
    public function testBlob()
    {
        $enum = Xyster_Db_DataType::Blob();
        $this->_runTests($enum, 'Blob', 9);
    }

    /**
     * Tests a method
     */
    public function testBoolean()
    {
        $enum = Xyster_Db_DataType::Boolean();
        $this->_runTests($enum, 'Boolean', 10);
    }

    /**
     * Tests a method
     */
    public function testIdentity()
    {
        $enum = Xyster_Db_DataType::Identity();
        $this->_runTests($enum, 'Identity', 11);
    }

    /**
     * Tests a method
     */
    public function testBigint()
    {
        $enum = Xyster_Db_DataType::Bigint();
        $this->_runTests($enum, 'Bigint', 12);
    }

    /**
     * Tests a method
     */
    public function testDecimal()
    {
        $enum = Xyster_Db_DataType::Decimal();
        $this->_runTests($enum, 'Decimal', 14);
    }

    /**
     * Tests a method
     */
    public function testReal()
    {
        $enum = Xyster_Db_DataType::Real();
        $this->_runTests($enum, 'Real', 13);
    }
    
    /**
     * Runs the unit tests on an enum
     *
     * @param Xyster_Enum $actual
     * @param string $name
     * @param mixed $value
     */
    protected function _runTests( Xyster_Db_DataType $actual, $name, $value )
    {
        $this->assertEquals($name, $actual->getName());
        $this->assertEquals($value, $actual->getValue());
        $this->assertEquals('Xyster_Db_DataType ['.$value.','.$name.']', (string)$actual);
        $this->assertSame($actual, Xyster_Enum::parse('Xyster_Db_DataType', $name));
        $this->assertSame($actual, Xyster_Enum::valueOf('Xyster_Db_DataType', $value));
    }
}

// Call Xyster_Db_DataTypeTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Db_DataTypeTest::main') {
    Xyster_Db_DataTypeTest::main();
}
