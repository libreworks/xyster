<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Orm_Xsql_SplitTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Xsql_SplitTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Orm/Xsql/Split.php';

/**
 * Test class for Xyster_Orm_Xsql_Split.
 * Generated by PHPUnit on 2008-02-05 at 17:00:08.
 */
class Xyster_Orm_Xsql_SplitTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Xsql_SplitTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Tests the 'arrow' copy of the object
     */
    public function testArrow()
    {
        $split = Xyster_Orm_Xsql_Split::Arrow();
        $haystack = 'object->methodCall("another->field")->anotherMethod(field->field->field)';
        $expected = array(0=>'object', 1=>'methodCall("another->field")', 2=>'anotherMethod(field->field->field)');
        
        $this->assertEquals($expected, $split->split($haystack));
    }

    /**
     * Tests the 'comma' copy of the object
     */
    public function testComma()
    {
        $split = Xyster_Orm_Xsql_Split::Comma();
        $haystack = 'this method,"once split,"(,nothere), buthere';
        $expected = array(0=>'this method', 1=>'"once split,"(,nothere)', 2=>' buthere');
        
        $this->assertEquals($expected, $split->split($haystack));
    }

    /**
     * Tests the 'custom' copy of the object
     */
    public function testCustom()
    {
        $split = Xyster_Orm_Xsql_Split::Custom(' AND ');
        $haystack = '(this AND that) anD (or maybe this AND this) AnD myField = "this AND that"';
        $expected = array(0=>'(this AND that)', 1=> '(or maybe this AND this)', 2=>'myField = "this AND that"');
        
        $this->assertEquals($expected, $split->split($haystack));
    }

    /**
     * Tests the 'space' copy of the object
     */
    public function testSpace()
    {
    	$split = Xyster_Orm_Xsql_Split::Space();
        $haystack = 'A (great (test)) of "this method"';
        $expected = array(0=>'A', 1=>'(great (test))', 2=>'of', 3=>'"this method"');
        
        $this->assertEquals($expected, $split->split($haystack));
    }
}

// Call Xyster_Orm_Xsql_SplitTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Xsql_SplitTest::main') {
    Xyster_Orm_Xsql_SplitTest::main();
}
