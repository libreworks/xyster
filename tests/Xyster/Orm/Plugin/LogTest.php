<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Plugin_LogTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Plugin_LogTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'TestSetup.php';

require_once 'Xyster/Orm/Plugin/Log.php';
require_once 'Zend/Log.php';
require_once 'Zend/Log/Writer/Mock.php';
require_once 'Xyster/Auth/Adapter/Stub.php';
require_once 'Zend/Auth/Storage/NonPersistent.php';
require_once 'Zend/Auth.php';

/**
 * Test class for Xyster_Orm_Plugin_Log.
 * Generated by PHPUnit on 2008-05-11 at 16:59:05.
 */
class Xyster_Orm_Plugin_LogTest extends Xyster_Orm_TestSetup
{
    /**
     * @var    Xyster_Orm_Plugin_Log
     */
    protected $object;

    /**
     * @var Zend_Log_Writer_Mock
     */
    protected $writer;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Plugin_LogTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    public function setUp()
    {
        $this->writer = new Zend_Log_Writer_Mock;
        $this->object = new Xyster_Orm_Plugin_Log(new Zend_Log($this->writer), true);
        $auth = Zend_Auth::getInstance();
        $auth->setStorage(new Zend_Auth_Storage_NonPersistent);
        $auth->authenticate(new Xyster_Auth_Adapter_Stub('doublecompile'));
        parent::setUp();
    }
    
    /**
     * Tests the 'postDelete' method
     */
    public function testPostDelete()
    {
        $entity = $this->_getMockEntity();
        $this->object->postDelete($entity);
        $msg = 'doublecompile DELETED MockBug(bugId=10)';
        $this->assertEquals($msg, $this->writer->events[0]['message']);
        
        $this->object = new Xyster_Orm_Plugin_Log(new Zend_Log($this->writer), false);
        $this->object->postDelete($entity);
        $msg = 'MockBug(bugId=10) was DELETED';
        $this->assertEquals($msg, $this->writer->events[1]['message']);
    }

    /**
     * Tests the 'postInsert' method
     */
    public function testPostInsert()
    {
        $entity = $this->_getMockEntityWithNoPk();
        $entity->bugId = 20;
        $entity->bugDescription = 'I am not a millionaire';
        $entity->bugStatus = 'NEW';
        $entity->createdOn = '2008-04-29';
        $entity->updatedOn = '2008-04-29';
        $entity->reportedBy = 'keefer';
        $entity->assignedTo = 'doublecompile';
        $entity->verifiedBy = 'rspeed';
        $entity->import($entity->toArray());
        $entity->setDirty(false);
        
        $this->object->postInsert($entity);
        $string = '';
        $first = true;
        foreach( $entity->toArray() as $name => $value ) {
            if ( !$first ) {
                $string .= ',';
            }
            $string .= $name . '=' . $value;
            $first = false;
        }
        $msg = 'doublecompile INSERTED MockBug(bugId=20) ['.$string.']';
        $this->assertEquals($msg, $this->writer->events[0]['message']);
        
        $this->object = new Xyster_Orm_Plugin_Log(new Zend_Log($this->writer), false);
        $this->object->postInsert($entity);
        $msg = 'MockBug(bugId=20) was INSERTED ['.$string.']';
        $this->assertEquals($msg, $this->writer->events[1]['message']);
    }

    /**
     * Tests the 'preUpdate' method
     */
    public function testPreUpdate()
    {
        $entity = $this->_getMockEntity();
        $entity->reportedBy = 'astratton';
        $entity->bugStatus = 'CLOSED';
        $this->object->preUpdate($entity);
        $updates = array();
        $current = $entity->toArray();
        foreach( $entity->getBase() as $name => $value ) {
            if ( $value != $current[$name] ) {
                $updates[] = $name . ': ' . $value . '=>' . $current[$name];
            }
        }
        $string = implode('; ', $updates);
        $msg = 'doublecompile UPDATED MockBug(bugId=10) [' . $string . ']';
        $this->assertEquals($msg, $this->writer->events[0]['message']);
        
        $this->object = new Xyster_Orm_Plugin_Log(new Zend_Log($this->writer), false);
        $this->object->preUpdate($entity);
        $msg = 'MockBug(bugId=10) was UPDATED [' . $string . ']';
        $this->assertEquals($msg, $this->writer->events[1]['message']);
    }
}

// Call Xyster_Orm_Plugin_LogTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Plugin_LogTest::main')
{
    Xyster_Orm_Plugin_LogTest::main();
}
