<?php
/**
 * Xyster Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to xyster@devweblog.org so we can send you a copy immediately.
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007 Irrational Logic (http://devweblog.org)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Plugin_BrokerTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Plugin_BrokerTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';

require_once 'Xyster/Orm/Plugin/_files/TestEntity.php';
require_once 'Xyster/Orm/Plugin/Broker.php';
require_once 'Xyster/Orm/Entity.php';
require_once 'Xyster/Orm/Plugin/Abstract.php';

/**
 * Test class for Xyster_Orm_Plugin_Broker.
 * Generated by PHPUnit on 2007-10-07 at 11:59:12.
 */
class Xyster_Orm_Plugin_BrokerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Xyster_Orm_Plugin_Broker
     */
    public $broker;
    
    /**
     * The mock test plugin
     *
     * @var Xyster_Orm_Plugin_BrokerTest_TestPlugin
     */
    public $plugin;
    
    /**
     * The mock entity
     *
     * @var Xyster_Orm_Plugin_TestEntity
     */
    public $entity;
    
    /**
     * Runs the test methods of this class.
     *
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite(__CLASS__);
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * This method is called before a test is executed.
     *
     */
    protected function setUp()
    {
        $this->broker = new Xyster_Orm_Plugin_Broker;
        $this->plugin = $this->getMock('Xyster_Orm_Plugin_Abstract',
            array('preDelete', 'preInsert', 'preUpdate', 'postDelete',
            'postInsert', 'postLoad', 'postUpdate'));
        $this->broker->registerPlugin($this->plugin);
        $this->entity = new Xyster_Orm_Plugin_TestEntity;
    }

    /**
     * Tests the 'getPlugin' method
     */
    public function testGetPlugin()
    {
        $return = $this->broker->getPlugin(get_class($this->plugin));
        $this->assertSame($this->plugin, $return);
        
        $return = $this->broker->getPlugin('Xyster_Orm_Entity');
        $this->assertFalse($return);
        
        $this->broker->registerPlugin(clone $this->plugin);
        $return = $this->broker->getPlugin(get_class($this->plugin));
        $this->assertType('array', $return);
    }

    /**
     * Tests the 'hasPlugin' method
     */
    public function testHasPlugin()
    {
        $this->assertTrue($this->broker->hasPlugin(get_class($this->plugin)));
        $this->assertFalse($this->broker->hasPlugin('Xyster_Orm_Entity'));
    }

    /**
     * Tests the 'postDelete' method
     */
    public function testPostDelete()
    {
        $this->plugin->expects($this->once())
            ->method('postDelete');
        $this->broker->postDelete($this->entity);
    }

    /**
     * Tests the 'postInsert' method
     */
    public function testPostInsert()
    {
        $this->plugin->expects($this->once())
            ->method('postInsert');
        $this->broker->postInsert($this->entity);
    }

    /**
     * Tests the 'postLoad' methodc
     */
    public function testPostLoad()
    {
        $this->plugin->expects($this->once())
            ->method('postLoad');
        $this->broker->postLoad($this->entity);
    }

    /**
     * Tests the 'postUpdate' method
     */
    public function testPostUpdate()
    {
        $this->plugin->expects($this->once())
            ->method('postUpdate');
        $this->broker->postUpdate($this->entity);
    }

    /**
     * Tests the 'preDelete' method
     */
    public function testPreDelete()
    {
        $this->plugin->expects($this->once())
            ->method('preDelete');
        $this->broker->preDelete($this->entity);
    }

    /**
     * Tests the 'preInsert' method
     */
    public function testPreInsert()
    {
        $this->plugin->expects($this->once())
            ->method('preInsert');
        $this->broker->preInsert($this->entity);
    }

    /**
     * Tests the 'preUpdate' method
     */
    public function testPreUpdate()
    {
        $this->plugin->expects($this->once())
            ->method('preUpdate');
        $this->broker->preUpdate($this->entity);
    }

    /**
     * Tests the 'registerPlugin' method with the same index
     */
    public function testRegisterPluginDuplicateStackIndex()
    {
        $plugin  = $this->getMock('Xyster_Orm_Plugin_Abstract');
        $plugin2  = $this->getMock('Xyster_Orm_Plugin_Abstract');
        $this->broker->registerPlugin($plugin, 1);
        
        try {
            $this->broker->registerPlugin($plugin2, 1);
            $this->fail('Exception not thrown');
        } catch ( Xyster_Orm_Exception $thrown ) {
            // do nothing
        }
    }
    
    /**
     * Tests the 'registerPlugin' method with the same plugin already registered
     *
     */
    public function testRegisterPluginDuplicate()
    {
        try {
            $this->broker->registerPlugin($this->plugin);
            $this->fail('Exception not thrown');
        } catch ( Xyster_Orm_Exception $thrown ) {
            $this->assertContains('already', $thrown->getMessage());
        }
    }
    
    /**
     * Tests the stack index increments properly
     *
     */
    public function testRegisterPluginStackIndex()
    {
        $this->broker->unregisterPlugin($this->plugin);
        
        $plugin  = $this->getMock('Xyster_Orm_Plugin_Abstract');
        $plugin2  = $this->getMock('Xyster_Orm_Plugin_Abstract');
        $this->broker->registerPlugin($plugin, 1);
        $this->broker->registerPlugin($plugin2);
        
        $expected = array(1=>$plugin, 2=>$plugin2);
        $this->assertSame($expected, $this->broker->getPlugins());
    }

    /**
     * Tests the 'unregisterPlugin' method
     */
    public function testUnregisterPlugin()
    {
        $class = get_class($this->plugin);
        $this->assertTrue($this->broker->hasPlugin($class));
        $return = $this->broker->unregisterPlugin($this->plugin);
        $this->assertSame($this->broker, $return);
        $this->assertFalse($this->broker->hasPlugin($class));
    }
    
    /**
     * Tests the 'unregisterPlugin' method with a class name
     *
     */
    public function testUnregisterPluginWithClass()
    {
        $class = get_class($this->plugin);
        $this->assertTrue($this->broker->hasPlugin($class));
        $return = $this->broker->unregisterPlugin($class);
        $this->assertSame($this->broker, $return);
        $this->assertFalse($this->broker->hasPlugin($class));
    }
    
    /**
     * Tests the 'unregisterPlugin' method with a non-registered plugin
     *
     */
    public function testUnregisterNonexistant()
    {
        $plugin = $this->getMock('Xyster_Orm_Plugin_Abstract');
        try {
            $this->broker->unregisterPlugin($plugin);
            $this->fail('Exception not thrown');
        } catch ( Xyster_Orm_Exception $thrown ) {
            
        }
    }
}

// Call Xyster_Orm_Plugin_BrokerTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Plugin_BrokerTest::main') {
    Xyster_Orm_Plugin_BrokerTest::main();
}
