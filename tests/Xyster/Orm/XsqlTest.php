<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Orm_XsqlTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_XsqlTest::main');
}

require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Orm/Xsql.php';

/**
 * Test class for Xyster_Orm_Xsql.
 * Generated by PHPUnit on 2008-02-05 at 16:54:45.
 */
class Xyster_Orm_XsqlTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_XsqlTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Tests the 'isMethodCall' method
     *
     */
    public function testIsMethodCall()
    {
        $this->assertTrue(Xyster_Orm_Xsql::isMethodCall('thisBeAMethodCall()'));
        $this->assertTrue(Xyster_Orm_Xsql::isMethodCall('thisBeAMethodCall(123,"something")'));
        $this->assertFalse(Xyster_Orm_Xsql::isMethodCall('justSomeField'));
    }

    /**
     * Tests the 'isLiteral' method
     */
    public function testIsLiteral()
    {
        $tests = array(
                '0123.00' => true,
                'null' => true,
                '"testing"' => true,
                '"\"testing\""' => true,
                '"still \"testing\" the thing"' => true,
                'still \"testing\" the thing"' => false,
                '"still \"testing\" the " thing"' => false,
                'validField' => true,
                'validField->property' => true,
                'validField->nested->property' => true,
                'validField->bad()syntax->call' => false,
                'validField->call(123.0, "my string")' => true,
                'validField->call(anotherField, field->method())' => true,
                'validField->call(anotherField, field->bad()method, 123)' => false,
                'validField->call(anotherField, field->method("argument" ), "finely \"quoted\"")' => true
        );
        foreach( $tests as $k => $v ) {
        	$this->assertEquals($v, Xyster_Orm_Xsql::isLiteral($k));
        }
    }
    
    /**
     * Tests the 'isValidField' method
     *
     */
    public function testIsValidField()
    {
        $this->assertFalse(Xyster_Orm_Xsql::isValidField('fieldName!'));
        $this->assertTrue(Xyster_Orm_Xsql::isValidField('fieldName'));
        $this->assertTrue(Xyster_Orm_Xsql::isValidField('fieldName->another'));
        $this->assertTrue(Xyster_Orm_Xsql::isValidField('fieldName->another()'));
        $this->assertTrue(Xyster_Orm_Xsql::isValidField('testMethodCall(123,"AOEU",anotherField)'));
        $this->assertFalse(Xyster_Orm_Xsql::isValidField('testMethodCall(123,%%%,anotherField)'));
    }

    /**
     * Tests the 'matchGroups' method
     */
    public function testMatchGroups()
    {
        $sql = 'WHERE (columnOne = "some value(") AND ' 
            . '(columnTwo = "some value" OR (columnThree = "some value")) AND '
        //  . 'columnFour = "something (else) entirely" ';
            . 'columnFour = "something else entirely" '; // parenths in top-level quotes fail right now

        $expected = array('(columnOne = "some value(")', '(columnTwo = "some value" OR (columnThree = "some value"))');
        
        $this->assertEquals($expected, Xyster_Orm_Xsql::matchGroups($sql));
        
        $this->assertEquals(array(), Xyster_Orm_Xsql::matchGroups('Hello world'));
    }

    /**
     * Tests the 'splitArrow' method
     */
    public function testSplitArrow()
    {
        $haystack = 'object->methodCall("another->field")->anotherMethod(field->field->field)';
        $expected = array(0=>'object', 1=>'methodCall("another->field")', 2=>'anotherMethod(field->field->field)');
        
        $this->assertEquals($expected, Xyster_Orm_Xsql::splitArrow($haystack));
    }

    /**
     * Tests the 'splitComma' method
     */
    public function testSplitComma()
    {
        $haystack = 'this method,"once split,"(,nothere), buthere';
        $expected = array(0=>'this method', 1=>'"once split,"(,nothere)', 2=>' buthere');
        
        $this->assertEquals($expected, Xyster_Orm_Xsql::splitComma($haystack));
    }

    /**
     * Tests the 'splitSpace' method
     */
    public function testSplitSpace()
    {
        $haystack = 'A (great (test)) of "this method"';
        $expected = array(0=>'A', 1=>'(great (test))', 2=>'of', 3=>'"this method"');
        
        $this->assertEquals($expected, Xyster_Orm_Xsql::splitSpace($haystack));
    }
}

// Call Xyster_Orm_XsqlTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_XsqlTest::main') {
    Xyster_Orm_XsqlTest::main();
}
