<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Data
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Data\Symbol;
use Xyster\Data\Symbol\AbstractClause;
/**
 * Test class for Xyster_Data_Clause.
 * Generated by PHPUnit on 2008-02-08 at 12:15:44.
 */
abstract class ClauseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var    AbstractClause
     */
    protected $object;
    
    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
    	$type = $this->_getType();
    	$this->object = $type->getClass()->newInstance();
    	foreach( $this->_getItems() as $item ) {
    		$this->object->add($item);
    	}
    }
    
    /**
     * Tests the 'add' method
     */
    public function testAdd()
    {
    	$items = $this->_getItems();
    	$count = count($this->object);
    	$return = $this->object->add($items[0]);
    	$this->assertSame($this->object, $return);
    	$this->assertGreaterThan($count, count($this->object));
    }

    /**
     * Tests the 'add' method with the wrong type
     * @expectedException \Xyster\Data\Symbol\InvalidArgumentException
     */
    public function testAddWrongType()
    {
    	$this->object->add(new ClauseTest_Symbol);
    }
    
    /**
     * Tests the 'count' method
     */
    public function testCount()
    {
        $this->assertEquals(count($this->_getItems()), count($this->object));
    }

    /**
     * Tests the 'getIterator' method
     */
    public function testGetIterator()
    {
        $this->assertType('\ArrayIterator', $this->object->getIterator());
        $this->assertType('\EmptyIterator', $this->_makeNew()->getIterator());
    }

    /**
     * Tests the 'merge' method
     */
    public function testMerge()
    {
    	$count = count($this->object);
        $return = $this->object->merge($this->object);
        $this->assertSame($this->object, $return);
        $this->assertEquals($count*2, count($this->object));
    }

    /**
     * Tests trying to add the wrong type
     * @expectedException \Xyster\Data\Symbol\InvalidArgumentException
     */
    public function testMergeWrongType()
    {
    	$this->object->merge(new ClauseTest_SymbolClause);
    }
    
    /**
     * Tests the 'remove' method
     */
    public function testRemove()
    {
        $count = count($this->object);
        $return = $this->object->remove(current($this->_getItems()));
        $this->assertTrue($return);
        $this->assertLessThan($count, count($this->object));
    }

    /**
     * Tests the 'remove' method
     */
    public function testRemoveNotThere()
    {
    	$return = $this->object->remove(new ClauseTest_Symbol);
    	$this->assertFalse($return);
    }
    
    /**
     * Tests the 'toArray' method
     */
    public function testToArray()
    {
        $this->assertEquals($this->_getItems(), $this->object->toArray());
    }

    /**
     * Tests the 'toString' method
     */
    public function test_Xyster_Data__toString()
    {
        $this->assertEquals(implode(', ', $this->_getItems()), $this->object->__toString());
    }
    
    /**
     * Gets the items to be added to the clause
     *
     * @return array
     */
    abstract protected function _getItems();
    
    /**
     * Gets the type of the clause to be tested
     *
     * @return Xyster\Type\Type
     */
    abstract protected function _getType();
    
    /**
     * Uses reflection to create a new instance of the clause
     *
     * @return AbstractClause
     */
    protected function _makeNew()
    {
    	$type = \Xyster\Type\Type::of($this->object);
    	return $type->getClass()->newInstance();
    }
}

class ClauseTest_Symbol implements \Xyster\Data\Symbol\ISymbol
{
	public function __toString()
	{
		return 'testing';
	}
}

class ClauseTest_SymbolClause extends AbstractClause
{
    static private $_type;
    
    public function __construct()
    {
        if ( !self::$_type instanceof \Xyster\Type\Type ) {
            self::$_type = new \Xyster\Type\Type('\XysterTest\Data\Symbol\ClauseTest_Symbol');
        }
        parent::__construct(self::$_type);
    }
}
