<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Data
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Data\Symbol;
use Xyster\Data\Symbol\Evaluator;
/**
 * Test class for Xyster_Data_Field_Getter.
 * Generated by PHPUnit on 2008-07-15 at 16:03:17.
 */
class EvaluatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Tests the 'evaluate' method with a bad name
     * @expectedException \Xyster\Data\Symbol\InvalidArgumentException
     */
    public function testEvaluateBadName()
    {
        Evaluator::get(array('firstname'=>'Bob'), 'lastname');
    }
    
    /**
     * Tests the evaluate method with a bad param
     * @expectedException \Xyster\Data\Symbol\InvalidArgumentException
     */
    public function testEvaluateBadParam()
    {
        Evaluator::get(1234, 'foobar');
    }
    
    /**
     * Tests the 'evaluate' method
     */
    public function testEvaluate()
    {
        $getter = new Evaluator('foobar');
        
        $obj2 = new EvaluatorTest_Array;
        $obj3 = new EvaluatorTest_Bean;
        $obj = new \stdClass;
        $obj->foobar = 'test123';
        
        $tests = array(
            array('foobar'=>'test123'),
            $obj,
            $obj2,
            $obj3
        );
        foreach( $tests as $test ) {
            $this->assertEquals('test123', $getter->evaluate($test));
        }
        
        $getter = new Evaluator('foobarMethod(123)');
        $this->assertEquals('test123', $getter->evaluate($obj2));
    }

    /**
     * Tests the 'get' method
     */
    public function testGet()
    {
        $array = array('foobar' => 'Hello, world!');
        $this->assertEquals($array['foobar'], Evaluator::get($array, 'foobar'));
    }
}

class EvaluatorTest_Bean
{
    public function getFoobar()
    {
        return 'test123';
    }
}

class EvaluatorTest_Array implements \ArrayAccess
{
    public function foobarMethod()
    {
        return 'test123';
    }
    function offsetSet($offset, $value)
    {
        
    }
    function offsetGet($offset)
    {
        return 'test123';
    }
    function offsetUnset($offset)
    {
    }
    function offsetExists($offset)
    {
        return true;   
    }
}
