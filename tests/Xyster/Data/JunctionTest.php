<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Data
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Data_JunctionTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Data_JunctionTest::main');
}

require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Data/Junction.php';
require_once 'Xyster/Data/Expression.php';

/**
 * Test class for Xyster_Data_Junction.
 * Generated by PHPUnit on 2008-02-08 at 12:01:57.
 */
class Xyster_Data_JunctionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Xyster_Data_Junction
     */
    protected $object;
    
    protected $expr = array();
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Data_JunctionTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->expr[] = Xyster_Data_Expression::eq('foo', 'bar');
        $this->expr[] = Xyster_Data_Expression::eq('meaning', 42);
        $this->expr[] = Xyster_Data_Expression::eq('capitalOfNebraska', 'Lincoln');
        $this->object = Xyster_Data_Criterion::fromArray('AND', $this->expr);
    }
    
    /**
     * Tests the 'add' method
     */
    public function testAdd()
    {
        $junc = Xyster_Data_Junction::all( 
            Xyster_Data_Expression::eq('foo', 'bar'),
            Xyster_Data_Expression::eq('meaning', 42));
        // test criteria is added to junction
        $junc->add(Xyster_Data_Expression::eq('capitalOfNebraska', 'Lincoln'));

        $junc2 = Xyster_Data_Junction::all(
            Xyster_Data_Expression::eq('username', 'hawk'),
                Xyster_Data_Expression::gt('posted', '2007-07-07'));
        // if criteria is junction with same operator, just append contents
        $junc->add($junc2);
        $this->assertTrue($junc->getCriteria()->containsAll($junc2->getCriteria()));
    }

    /**
     * Tests the 'count' method
     */
    public function testCount()
    {
        $this->assertEquals(3, count($this->object));
    }

    /**
     * Tests the 'evaluate' method
     */
    public function testEvaluate()
    {
        $all = Xyster_Data_Junction::all(
                Xyster_Data_Expression::eq('username', 'hawk'),
                Xyster_Data_Expression::gt('posted', '2007-07-07')
            );
        $all->add(Xyster_Data_Expression::like('title', '%unit tests%'));
        // test 'AND' is true
        $this->assertTrue($all->evaluate(array('username'=>'hawk',
            'posted'=>'2007-07-08', 'title'=>'effective unit tests rock')));
        // test 'AND' is false
        $this->assertFalse($all->evaluate(array('username'=>'hawk',
            'posted'=>'2007-07-08', 'title'=>'innefective ones do not rock')));

        $any = Xyster_Data_Junction::any(
                Xyster_Data_Expression::eq('category','UnitTests'),
                Xyster_Data_Expression::like('title', '%unit tests%')
            );
        $any->add(Xyster_Data_Expression::neq('isTest', null));
        // test 'OR' is true
        $this->assertTrue($any->evaluate(array('category'=>'Misc',
            'title'=>'Testing framework', 'isTest'=>'Yeah')));
        // test 'OR' is false
        $this->assertFalse($any->evaluate(array('category'=>'Misc',
            'title'=>'Testing framework', 'isTest'=>null)));
    }

    /**
     * Tests the 'getCriteria' method
     */
    public function testGetCriteria()
    {
        $this->assertType('Xyster_Collection_Interface', $this->object->getCriteria());
        $this->assertTrue($this->object->getCriteria()->containsAll(Xyster_Collection::using($this->expr)));
    }

    /**
     * Tests the 'getIterator' method
     */
    public function testGetIterator()
    {
        $this->assertType('Iterator', $this->object->getIterator());
    }

    /**
     * Tests the 'toArray' method
     */
    public function testToArray()
    {
        $this->assertEquals($this->expr, $this->object->toArray());
    }

    /**
     * Tests the 'toString' method
     */
    public function test__toString()
    {
        $expr1 = Xyster_Data_Expression::eq('field1', 'foo');
        $expr2 = Xyster_Data_Expression::like('field2', '%bar');
        $expr3 = Xyster_Data_Expression::gt('field3', 1);
        $all = Xyster_Data_Junction::all($expr1, $expr2);
        $all->add($expr3);
        $this->assertEquals("( $expr1 AND $expr2 AND $expr3 )", (string)$all);
    }

    /**
     * Tests the 'any' static method
     */
    public function testAny()
    {
        $expr1 = Xyster_Data_Expression::eq('field1', 'foo');
        $expr2 = Xyster_Data_Expression::like('field2', '%bar');
        $any = Xyster_Data_Junction::any($expr1, $expr2);
        $this->_testStaticFactory($any, 'OR', $expr1, $expr2);
    }

    /**
     * Tests the 'all' static method
     */
    public function testAll()
    {
        $expr1 = Xyster_Data_Expression::eq('field1', 'foo');
        $expr2 = Xyster_Data_Expression::like('field2', '%bar');
        $all = Xyster_Data_Junction::all($expr1, $expr2);
        $this->_testStaticFactory($all, 'AND', $expr1, $expr2);
    }
    
    /**
     * Tests adding the same operator
     */
    public function testAllSameOperator()
    {
        $all = Xyster_Data_Junction::all(
            Xyster_Data_Junction::all(
                Xyster_Data_Expression::eq('field1', 'foo'),
                Xyster_Data_Expression::like('field2', '%bar')
            ),
            Xyster_Data_Junction::all(
                Xyster_Data_Expression::eq('field3', 'foo'),
                Xyster_Data_Expression::like('field4', '%bar')
            )
        );
        $this->assertEquals(4, count($all->getCriteria()));
    }
    
    /**
     * Runs common tests on a Junction
     *
     * @param Xyster_Data_Junction $junction
     * @param string $operator
     * @param Xyster_Data_Criterion $expr1
     * @param Xyster_Data_Criterion $expr2
     */
    protected function _testStaticFactory( Xyster_Data_Junction $junction, $operator, Xyster_Data_Criterion $expr1, Xyster_Data_Criterion $expr2 )
    {
        $this->assertEquals($operator, $junction->getOperator());
        $this->assertTrue($junction->getCriteria()->contains($expr1));
        $this->assertTrue($junction->getCriteria()->contains($expr2));
    }
}

// Call Xyster_Data_JunctionTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Data_JunctionTest::main') {
    Xyster_Data_JunctionTest::main();
}
