<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Data
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Data_Operator_ExpressionTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Data_Operator_ExpressionTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Data/Operator/Expression.php';

/**
 * Test class for Xyster_Data_Operator_Expression.
 * Generated by PHPUnit on 2008-02-09 at 11:02:24.
 */
class Xyster_Data_Operator_ExpressionTest extends PHPUnit_Framework_TestCase
{
    static protected $_operators = array(
            "Eq" => "=",
            "Neq" => "<>",
            "Lt" => "<",
            "Lte" => "<=",
            "Gt" => ">",
            "Gte" => ">=",
            "Like" => "LIKE",
            "NotLike" => "NOT LIKE",
            "Between" => "BETWEEN",
            "NotBetween" => "NOT BETWEEN",
            "In" => "IN",
            "NotIn" => "NOT IN"
        );
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Data_Operator_ExpressionTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Tests the 'evaluate' method
     */
    public function testEvaluate()
    {
        $tests = array(
            'Eq' => array(
                    array('foo', 'foo', true),
                    array('foo', 'bar', false),
                ),
            'Neq' => array(
                    array('foo', 'foo', false),
                    array('foo', 'bar', true),
                ),
            'Lt' => array(
                    array('7', '9', true),
                    array('7', '7', false),
                    array('7', '5', false),
                    array('Alpha', 'Beta', true),
                    array('Beta', 'Alpha', false),
                ),
            'Lte' => array(
                    array('7', '9', true),
                    array('7', '7', true),
                    array('7', '5', false),
                    array('Alpha', 'Beta', true),
                    array('Beta', 'Alpha', false),
                ),
            'Gt' => array(
                    array('7', '9', false),
                    array('7', '7', false),
                    array('7', '5', true),
                    array('Alpha', 'Beta', false),
                    array('Beta', 'Alpha', true),
                ),
            'Gte' => array(
                    array('7', '9', false),
                    array('7', '7', true),
                    array('7', '5', true),
                    array('Alpha', 'Beta', false),
                    array('Beta', 'Alpha', true),
                ),
            'Like' => array(
                    array('New York', 'York%', false),
                    array('Yorkshire', 'York%', true),
                    array('Baltimore', 'York%', false),
                    array('New York', '%York', true),
                    array('Yorkshire', '%York', false),
                    array('Baltimore', '%York', false),
                    array('New York', '%York%', true),
                    array('Yorkshire', '%York%', true),
                    array('Baltimore', '%York%', false),
                    ),
            'NotLike' => array(
                    array('New York', 'York%', true),
                    array('Yorkshire', 'York%', false),
                    array('Baltimore', 'York%', true),
                    array('New York', '%York', false),
                    array('Yorkshire', '%York', true),
                    array('Baltimore', '%York', true),
                    array('New York', '%York%', false),
                    array('Yorkshire', '%York%', false),
                    array('Baltimore', '%York%', true),
                ),
            'Between' => array(
                    array('foo', array('bar', 'zed'), true),
                    array(2, array(3, 10), false),
                ),
            'NotBetween' => array(
                    array('foo', array('bar', 'zed'), false),
                    array(2, array(3, 10), true),
                ),
            'In' => array(
                    array(16, array(15, 16, 17), true),
                    array(2, array(15, 16, 17), false),
                ),
            'NotIn' => array(
                    array(16, array(15, 16, 17), false),
                    array(2, array(15, 16, 17), true),
                ) 
        );
        
        foreach( $tests as $name => $opTests ) {
        	$enum = call_user_func(array('Xyster_Data_Operator_Expression', $name));
        	foreach( $opTests as $test ) {
        		$a = $test[0];
        		$b = $test[1];
        		$expected = $test[2];
        		$this->assertEquals($expected, $enum->evaluate($a, $b), "$a $name $b");
        	}
        }
    }

    /**
     * Tests the static methods
     */
    public function testStatic()
    {
        foreach( self::$_operators as $name => $value ) {
        	$enum = call_user_func(array('Xyster_Data_Operator_Expression', $name));
        	$this->_runTests($enum, $name, $value);
        }
    }

    /**
     * Runs the common tests
     *
     * @param Xyster_Data_Operator_Expression $actual
     * @param string $name
     * @param string $value
     */
    protected function _runTests( $actual, $name, $value )
    {
        $this->assertEquals($name,$actual->getName());
        $this->assertEquals($value,$actual->getValue());
        $this->assertEquals('Xyster_Data_Operator_Expression ['.$value.','.$name.']',(string)$actual);
        $this->assertEquals($actual,Xyster_Enum::parse('Xyster_Data_Operator_Expression',$name));
        $this->assertEquals($actual,Xyster_Enum::valueOf('Xyster_Data_Operator_Expression',$value));
    }
}

// Call Xyster_Data_Operator_ExpressionTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Data_Operator_ExpressionTest::main') {
    Xyster_Data_Operator_ExpressionTest::main();
}
