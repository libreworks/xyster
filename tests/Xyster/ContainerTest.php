<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
require_once dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Definition.php';
require_once 'Xyster/Collection.php';
require_once 'Xyster/Collection/Map/String.php';

/**
 * Test class for Xyster_Container.
 * Generated by PHPUnit on 2009-06-14 at 18:35:23.
 */
class Xyster_ContainerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container
     */
    protected $object;

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Container;
    }
    
    public function testAutowire()
    {
        self::assertSame($this->object, $this->object->autowire('Xyster_Collection', 'colly'));
        self::assertAttributeEquals(
            array('colly'=>
                new Xyster_Container_Injector_Autowiring(
                    new Xyster_Container_Definition('Xyster_Collection', 'colly'),
                    Xyster_Container_Autowire::Constructor())),
            '_providers', $this->object);
    }

    public function testAutowireByName()
    {
        self::assertSame($this->object, $this->object->autowireByName('Xyster_Collection', 'colly'));
        self::assertAttributeEquals(
            array('colly'=>
                new Xyster_Container_Injector_Autowiring(
                    new Xyster_Container_Definition('Xyster_Collection', 'colly'),
                    Xyster_Container_Autowire::ByName())),
            '_providers', $this->object);
    }

    public function testAutowireByType()
    {
        self::assertSame($this->object, $this->object->autowireByType('Xyster_Collection', 'colly'));
        self::assertAttributeEquals(
            array('colly'=>
                new Xyster_Container_Injector_Autowiring(
                    new Xyster_Container_Definition('Xyster_Collection', 'colly'),
                    Xyster_Container_Autowire::ByType())),
            '_providers', $this->object);
    }

    public function testAddProvider()
    {
        $prov = new Xyster_Container_Injector_Standard(new Xyster_Container_Definition('Xyster_Collection', 'colly'));
        self::assertAttributeEquals(array(), '_providers', $this->object);
        self::assertSame($this->object, $this->object->addProvider($prov));
        self::assertAttributeEquals(array('colly'=>$prov), '_providers', $this->object);
    }
    
    public function testAddProviderAgain()
    {
        $def = new Xyster_Container_Definition('Xyster_Collection', 'colly');
        $this->object->add($def);
        $this->setExpectedException('Xyster_Container_Exception', 'A component with the name "colly" is already registered');
        $this->object->add($def);
    }

    public function testContains()
    {
        self::assertSame($this->object, $this->object->add(new Xyster_Container_Definition('ArrayObject')));
        self::assertTrue($this->object->contains('ArrayObject'));
        self::assertFalse($this->object->contains('Foobar'));
    }

    public function testContainsType()
    {
        self::assertSame($this->object, $this->object->add(new Xyster_Container_Definition('ArrayObject')));
        self::assertTrue($this->object->containsType('ArrayObject'));
    }

    public function testDefinition()
    {
        self::assertEquals(new Xyster_Container_Definition('Xyster_Collection', 'foobar'),
            Xyster_Container::definition('Xyster_Collection', 'foobar'));
    }
    
    public function testGet()
    {
        self::assertNull($this->object->get('foobar'));
        $this->object->add(new Xyster_Container_Definition('Xyster_Collection', 'colly'))
            ->add(new Xyster_Container_Definition('Xyster_Collection_Map_String', 'props'));
        self::assertType('Xyster_Collection_Map_String', $this->object->get('props'));
    }

    public function testGetForType()
    {
        $type = new Xyster_Type('Xyster_Collection');
        $this->object->add(new Xyster_Container_Definition($type, 'colly'))
            ->add(new Xyster_Container_Definition('Xyster_Collection_Map_String', 'props'));
        self::assertEquals(array('colly'=>new Xyster_Collection()), $this->object->getForType($type));
    }

    public function testGetNames()
    {
        $this->object->add(new Xyster_Container_Definition('Xyster_Collection', 'colly'))
            ->add(new Xyster_Container_Definition('Xyster_Collection_Map_String', 'props'));
        self::assertEquals(array('colly', 'props'), $this->object->getNames());
        self::assertEquals(array('colly'), $this->object->getNames('Xyster_Collection_Interface'));
    }

    public function testGetParent()
    {
        $container = new Xyster_Container($this->object);
        self::assertSame($this->object, $container->getParent());
    }

    public function testGetType()
    {
        self::assertNull($this->object->getType('foobar'));
        $this->object->add(new Xyster_Container_Definition('Xyster_Collection', 'colly'))
            ->add(new Xyster_Container_Definition('Xyster_Collection_Map_String', 'props'));
        self::assertEquals(new Xyster_Type('Xyster_Collection'), $this->object->getType('colly'));
    }
}
