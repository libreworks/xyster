<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   Xyster_Controller
 * @subpackage   UnitTests
 * @copyright Copyright LibreWorks, LLC (http://libreworks.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
namespace XysterTest\Controller\Plugin;
use Xyster\Controller\Plugin\Auth;
/**
 * Test class for Xyster_Controller_Plugin_Auth.
 * Generated by PHPUnit on 2007-09-11 at 19:39:03.
 */
class AuthTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Request object
     * @var \Zend_Controller_Request_Http
     */
    public $request;

    /**
     * Response object
     * @var \Zend_Controller_Response_Http
     */
    public $response;

    /**
     * Auth plugin
     * @var Auth
     */
    public $plugin;
    
    /**
     * ACL
     * @var \Xyster\Acl\Acl
     */
    public $acl;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     */
    protected function setUp()
    {
        $this->acl = new \Xyster\Acl\Acl();
        \Zend_Auth::getInstance()->setStorage(new \Zend_Auth_Storage_NonPersistent());
        \Zend_Auth::getInstance()->clearIdentity();
        
        \Zend_Controller_Front::getInstance()->resetInstance();
        $this->request  = new \Zend_Controller_Request_Http();
        $this->response = new \Zend_Controller_Response_Cli();
        $this->plugin   = new Auth;
        $this->plugin->setAcl($this->acl);

        $this->plugin->setRequest($this->request);
        $this->plugin->setResponse($this->response);
    }
    
    /**
     * Tears down the test
     *
     */
    protected function tearDown()
    {
        \Zend_Auth::getInstance()->clearIdentity();
    }
    
    /**
     * Tests the get and set ACL methods
     *
     */
    public function testSetAcl()
    {
        $acl = new \Zend_Acl;
        $return = $this->plugin->setAcl($acl);
        
        $this->assertSame($this->plugin, $return);
        
        $return = $this->plugin->getAcl();
        
        $this->assertSame($acl, $return);
    }
    
    /**
     * Tests the adapter when no identity is present
     *
     */
    public function testNoIdentity()
    {
        \Zend_Auth::getInstance()->clearIdentity();
        $this->plugin->routeStartup($this->request);
        $this->assertFalse($this->acl->hasRole('doublecompile'));
        $this->assertFalse(\Zend_Auth::getInstance()->hasIdentity());
    }
    
    /**
     * Tests the plugin works if already called then adapter is later specified
     *
     */
    public function testStarted()
    {
        $this->plugin->routeStartup($this->request);
        $this->assertAttributeEquals(true, '_started', $this->plugin);
        $this->assertFalse($this->acl->hasRole('doublecompile'));
        $this->plugin->setAuthAdapter(new \XysterTest\Auth\Adapter\Stub('doublecompile'));
        $this->assertTrue($this->acl->hasRole('doublecompile'));
    }
    
    /**
     * Tests if the auth adapter returns failure
     *
     */
    public function testFailure()
    {
        $this->plugin->setAuthAdapter(new AuthTest_Failure_Adapter());
        $this->plugin->routeStartup($this->request);
        $this->assertFalse($this->acl->hasRole('doublecompile'));
        $this->assertFalse(\Zend_Auth::getInstance()->hasIdentity());
        
        $this->assertEquals('index', $this->request->getActionName());
        $this->assertEquals('login', $this->request->getControllerName());
        $this->assertEquals('default', $this->request->getModuleName());
    }
    
    /**
     * Tests the 'getRole' method
     *
     */
    public function testGetRole()
    {
        \Zend_Auth::getInstance()->authenticate(new \XysterTest\Auth\Adapter\Stub('doublecompile'));
        $role = $this->plugin->getRole();
        
        $this->assertType('\Zend_Acl_Role_Interface', $role);
        $this->assertEquals('doublecompile', $role->getRoleId());
        $this->assertSame($role, $this->plugin->getRole());
    }
    
    /**
     * Tests the 'getRoleProvider' method when no provider has been set
     *
     */
    public function testGetRoleProvider()
    {
        $provider = $this->plugin->getRoleProvider();
        
        $this->assertType('\Xyster\Acl\Role\Provider', $provider);
    }
    
    /**
     * Tests the 'routeStartup' method
     *
     */
    public function testRouteStartup()
    {
        $this->plugin->setAuthAdapter(new \XysterTest\Auth\Adapter\Stub('doublecompile'));
        $this->assertFalse($this->acl->hasRole('doublecompile'));
        $this->plugin->routeStartup($this->request);
        $this->assertTrue($this->acl->hasRole('doublecompile'));
        
        $this->assertEquals('success', $this->request->getActionName());
        $this->assertEquals('login', $this->request->getControllerName());
        $this->assertEquals('default', $this->request->getModuleName());
    }
    
    /**
     * Tests the 'setFailure' method
     *
     */
    public function testSetFailure() 
    {
        $return = $this->plugin->setFailure('myfoo', 'bar', 'boobaz');

        $this->assertEquals('myfoo', $this->plugin->getFailModule());
        $this->assertEquals('bar', $this->plugin->getFailController());
        $this->assertEquals('boobaz', $this->plugin->getFailAction());
        $this->assertSame($this->plugin, $return);
    }
    
    /**
     * Tests the 'setRoleProvider' method
     *
     */
    public function testSetRoleProvider()
    {
        $provider = new \Xyster\Acl\Role\Provider();
        $return = $this->plugin->setRoleProvider($provider);
        
        $this->assertSame($this->plugin, $return);
        $this->assertSame($provider, $this->plugin->getRoleProvider());
    }
    
    /**
     * Tests the 'setSuccess' method
     *
     */
    public function testSetSuccess() 
    {
        $return = $this->plugin->setSuccess('myfoo', 'bar', 'boobaz');

        $this->assertEquals('myfoo', $this->plugin->getSuccessModule());
        $this->assertEquals('bar', $this->plugin->getSuccessController());
        $this->assertEquals('boobaz', $this->plugin->getSuccessAction());
        $this->assertSame($this->plugin, $return);
    }
}

/**
 * Just a simple stub object
 *
 */
class AuthTest_Failure_Adapter implements \Zend_Auth_Adapter_Interface
{
    public function authenticate()
    {
        return new \Zend_Auth_Result(\Zend_Auth_Result::FAILURE_IDENTITY_NOT_FOUND,
            null, array('Could not find identity'));
    }
}
