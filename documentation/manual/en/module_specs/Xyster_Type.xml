	<sect1 id="xyster.type.overview">
        <title>Overview</title>

        <para>The type class is a helper for determining types of variables as
            well as calculating equality and hash codes.  It has several useful
            methods to augment PHP's Reflection capabilities.</para>

        <sect2 id="xyster.type.overview.creating">
            <title>Creating</title>

            <para><classname>Xyster_Type</classname> accepts either a string
                name for the class it represents or a <classname>ReflectionClass</classname>
                object.  <classname>Xyster_Type</classname> accepts names for 
                classes, interfaces, or names for PHP primitive types (array,
                string, integer, boolean, and double).</para>
                
            <programlisting role="php"><![CDATA[<?php
require_once 'Xyster/Type.php';
$typeByString = new Xyster_Type('ArrayObject');
$reflectionClass = new ReflectionClass('ArrayObject');
$typeByReflectionClass = new Xyster_Type($reflectionClass);
]]></programlisting>

            <para>You can also create the object by using the static <methodname>of</methodname>
                method and passing an instance of the object for which you need
                the type.  This works with both objects and primitive types.</para>
                
            <programlisting role="php"><![CDATA[<?php
require_once 'Xyster/Type.php';
$myObject = new SplObjectStorage;
$typeOfObject = Xyster_Type::of($myObject);
echo $typeOfObject->getName() . "\n"; // prints SplObjectStorage

$myValue = "a test";
$typeOfScalar = Xyster_Type::of($myValue);
echo $typeOfScalar->getName() . "\n"; // prints string

$myArray = array(1, 2, 3);
$typeOfArray = Xyster_Type::of($myArray);
echo $typeOfArray->getName() . "\n"; // prints array
]]></programlisting>
        </sect2>

        <sect2 id="xyster.type.overview.usage">
            <title>Basic Usage</title>
            
            <para>A <classname>Xyster_Type</classname> object offers many useful
                methods to assist you in working with different classes and types.</para>
                
            <sect3 id="xyster.type.overview.usage.getclass">
                <title>getClass</title>
                
                <para>If the type is an actual class or interface, the <methodname>getClass</methodname>
                    will return a <classname>ReflectionClass</classname> object
                    for the type.  Scalar values like array and string cannot be
                    used with <classname>ReflectionClass</classname> like with 
                    other object-oriented programming languages.</para>
            </sect3>
            
            <sect3 id="xyster.type.overview.usage.isassignablefrom">
                <title>isAssignableFrom</title>
                
                <para>This method is borrowed from Java and does exactly the 
                    same thing. It determines if the type passed to the method
                    is a child of or is the same as the type the object
                    represents.</para>
                    
                <para>The <parameter>$type</parameter> argument can be either a
                    string, a <classname>ReflectionClass</classname> object or a
                    <classname>Xyster_Type</classname> object.</para>
            </sect3>
            
            <sect3 id="xyster.type.overview.usage.isinstance">
                <title>isInstance</title>
                
                <para>This method determines if the value passed to the method
                    is an instance of the type the object represents.</para>
                    
                <programlisting role="php"><![CDATA[<?php
$stringType = new Xyster_Type('string');
if ( $stringType->isInstance("This is a string") ) {
    echo "The argument is a string\n";
}

interface Foo
{
    function print();
}
class Bar implements Foo
{
    public function print()
    {
    }
}

$fooType = new Xyster_Type('Foo');
if ( $fooType->isInstance(new Bar()) ) {
    echo "The argument is a Foo\n";
}
]]></programlisting>
            </sect3>
            
            <sect3 id="xyster.type.overview.usage.isobject">
                <title>isObject</title>
                
                <para>This method returns <code>true</code> if the type the object
                    represents is a class or an interface.  It returns <code>false</code> if
                    the type is a primitive type like string or array.</para>
                    
                <para>Any type where this method returns <code>false</code> will return
                    <code>null</code> for the <methodname>getClass</methodname>
                    method.</para>
            </sect3>
        </sect2>
    </sect1>