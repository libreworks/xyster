    <sect1 id="xyster.validate.errors">
        <title>Error Notification</title>
        
        <para>The <classname>Xyster_Validate_Errors</classname> class is a 
            notification object.  It is responsible for collecting the messages
            returned by a <classname>Zend_Validate</classname> class.  It implements
            <interfacename>Xyster_Collection_Interface</interfacename> so you
            can iterate over it and count the elements inside.</para>
            
        <para>Each message is stored in the set as a <classname>Xyster_Validate_Error</classname>
            object, containing the message and the name of the field to which the
            message applies.</para>
                
        <sect2 id="xyster.validate.errors.example">
            <title>Example of Use</title>
            
            <para>The notification object can accept either a <classname>Zend_Filter_Input</classname>
                or a <interfacename>Zend_Validate_Interface</interfacename> that
                will be used to collect messages.</para>
                
            <para>Here is an example with a single <interfacename>Zend_Validate_Interface</interfacename>
                object.</para>
                
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/EmailAddress.php';
require_once 'Xyster/Validate/Errors.php';

$fieldName = 'email';
$errors = new Xyster_Validate_Errors();
$validator = new Zend_Validate_EmailAddress();

$email = $values[ $fieldName ];

if ($validator->isValid($email)) {
    // email appears to be valid
} else {
    // email is invalid; get messages
    $errors->addValidateMessages($validator, $fieldName);
}
]]></programlisting>

            <para>Here is an example with a <classname>Zend_Filter_Input</classname>
                object.</para>

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Filter/Input.php';
require_once 'Xyster/Validate/Errors.php';

$errors = new Xyster_Validate_Errors();
$filters = array(
    'month'   => 'Digits',
    'account' => 'StringTrim'
);
$validators = array(
    'account' => 'Alpha'
);

$input = new Zend_Filter_Input($filters, $validators, $values);

if ( $input->isValid() ) {
    // all inputs are valid
} else {
    // something is invalid; get messages
    $errors->addFilterInputMessages($input);
}
]]></programlisting>

            <para>Using the notification pattern, you can pass a
                <classname>Xyster_Validate_Errors</classname> object to the
                layer of your application that performs the validation so the
                messages can find their way to the presentation layer.</para>
        </sect2>
    </sect1>