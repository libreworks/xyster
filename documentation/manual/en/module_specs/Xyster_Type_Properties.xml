	<sect1 id="xyster.type.properties">
        <title>Properties</title>

        <para>The interface <interfacename>Xyster\Type\Property\IProperty</interfacename>
            represents a mediator for setting and getting values from a named field on an object
            or an array. Basically, they are able to wrap an inner object or array
            and retrieve fields from them since objects and arrays have different mechanisms
            for retrieving named fields. You could use Reflection to retrieve the
            data from an object, but not for an array also. Type Properties aim
            to ease this.</para>

        <sect2 id="xyster.type.properties.explain">
            <title>Explanation of IProperty Classes</title>

            <sect3 id="xyster.type.properties.explain.direct">
                <title>The <classname>Xyster\Type\Property\Direct</classname> Property</title>

            <para>This IProperty only works on objects, and accesses properties directly,
                as if you called <code>$foo-&gt;bar</code> on the object.
                This will also work for properties implemented using the
                <methodname>__get</methodname> and <methodname>__set</methodname>
                magic methods.</para>
            </sect3>

            <sect3 id="xyster.type.properties.explain.map">
                <title>The <classname>Xyster\Type\Property\Map</classname> Property</title>

                <para>This IProperty works on arrays and objects which implement
                    <interfacename>ArrayAccess</interfacename>, as if you called
                    <code>$foo["bar"]</code> on the object/array.
                </para>
            </sect3>

            <sect3 id="xyster.type.properties.explain.method">
                <title>The <classname>Xyster\Type\Property\Method</classname> Property</title>

                <para>This IProperty works on objects which have a getter or setter
                    for the property. It works as if you called <code>$foo&gt;getBar()</code>
                    on the object. This will also work when the object has a
                    <methodname>__call</methodname> method defined which handles
                    getter and setter behavior.</para>
            </sect3>
        </sect2>

        <sect2 id="xyster.type.properties.creating">
            <title>Creating IProperty Objects</title>

            <para>Using <classname>Xyster\Type\Property\Factory</classname>, you
                can obtain a <interfacename>Xyster\Type\Property\IProperty</interfacename>
                for an object or array by calling the <methodname>get</methodname> method
                with a <parameter>$target</parameter> object/array and the 
                <parameter>$property</parameter> name. This factory caches its results.</para>

             <para>If the target is an array, or it's an instance of
                <interfacename>ArrayAccess</interfacename> and doesn't have a
                public field or method getter/setter for the property, a
                <classname>Xyster\Type\Property\Map</classname> is returned.</para>

             <para>If the target has a getter or setter method for the property,
                or has the magic <methodname>__call</methodname> method, a
                <classname>Xyster\Type\Property\Method</classname> is returned.</para>

             <para>Any other value will return a <classname>Xyster\Type\Property\Direct</classname>.</para>
        </sect2>

        <sect2 id="xyster.type.properties.custom">
            <title>Custom IProperty objects</title>

            <para>The default implementations noted above work with almost all
                field access scenarios. They do not, however, do any value conversion,
                such as from a string to an integer, or an empty string to null.
                Any custom operations on the values being retrieved from or set on
                an object can be implemented in custom <interfacename>IProperty</interfacename>
                classes (extending from one of the above implementations or not).</para>
        </sect2>
    </sect1>