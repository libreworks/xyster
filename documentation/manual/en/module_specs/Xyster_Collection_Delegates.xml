	<sect1 id="xyster.collection.delegates">
            <title>Delegate Collections and Maps</title>

            <para>There are two useful classes to help developers implement the
                <glossterm>Delegate</glossterm> pattern with collections and maps.</para>

            <sect2 id="xyster.collection.delegates.delegate">
                <title>Xyster\Collection\Delegate</title>

                <para>This class is a delegate <interfacename>Xyster\Collection\ICollection</interfacename>.
                    You can extend it, overriding only the methods you need to override. A few classes 
                    extend this class, namely <classname>Xyster\Collection\FixedCollection</classname> and the like.</para>

                <para>A good example of a delegate collection would be a wrapper to ensure the values passed
                    in to a collection are of a certain format, for instance implementing a certain type.
                    Here is an example.</para>

                <programlisting role="php"><![CDATA[<?php
class FooCollection extends Xyster\Collection\Delegate
{
    public function add( $item )
    {
        if ( !($item instanceof Foo) ) {
            throw new \InvalidArgumentException("This collection can only contain values of type Foo!");
        }
    }
}
]]></programlisting>
            </sect2>

            <sect2 id="xyster.collection.delegates.map">
                <title>Xyster\Collection\DelegateMap</title>

                <para>This class is a delegate <interfacename>Xyster\Collection\IMap</interfacename>.
                    You can extend it, overriding only the methods you need to override.
                    <classname>Xyster\Collection\FixedMap</classname> extends this class.</para>
            </sect2>
        </sect1>
