	<sect1 id="proxy">
            <title>Proxies</title>

            <para>Dynamically-created proxies to real objects are a convenient way
                to implement <firstterm>Aspect-Oriented</firstterm> Programming.
                While much less sophisticated than other PHP <acronym>AOP</acronym>
                systems, this package of Xyster allows for the basics.</para>

            <sect2>
                <title>Concept</title>

                <para>The <classname>Xyster\Type\Proxy\Builder</classname>
                class can be used to create these dynamic proxies. The basic idea
                is that at runtime a new class is created that extends from another
                and/or implements one or more interfaces. When the methods on this
                newly-generated class are invoked, another object implementing the
                <interfacename>Xyster\Type\Proxy\IHandler</interfacename> interface
                is called with the details of the method invocation. At this point,
                the handler can do anything it wishes, calling the parent class
                of the proxy if desired.
                </para>

                <para>Here is a simple example of this behavior.</para>

                <programlisting role="php"><![CDATA[<?php
class Foo
{
    public function __construct($value)
    {
        echo 'Foo::__construct was called with: ' . $value . PHP_EOL;
    }
    public function bar()
    {
        echo 'Foo::bar was called' . PHP_EOL;
    }
    public function baz()
    {
        echo 'Foo::baz was called' . PHP_EOL;
    }
}
class FooHandler implements Xyster\Type\Proxy\IHandler
{
    function invoke($object, \ReflectionMethod $called, array $args, \ReflectionMethod $parent = null)
    {
        echo "Proxy was called. ";
        if ( $parent != null ) {
            echo "About to invoke: " . $parent->getDeclaringClass() . "::" . $parent->getName();
            $parent->invoke($object);
        }
        echo PHP_EOL;
    }
}

$builder = new Xyster\Type\Proxy\Builder();
$proxy = $builder->setParent(new Xyster\Type\Type('Foo'))
    ->setInterfaces(array(new Xyster\Type\Type('Countable')))
    ->setCallParentConstructor(true)
    ->create('test');
$proxy->bar();
]]></programlisting>

                <para>When this script executes, the following output will occur.</para>

                <screen><![CDATA[Proxy was called. About to invoke: Foo::bar
Foo::bar was called
]]></screen>

                <para>Proxies with handlers can add useful behavior to existing
                    objects, such as transaction demarcation, logging, and security assertions.</para>
            </sect2>
            <sect2>
                <title>The Builder</title>

                <para>The <classname>Xyster\Type\Proxy\Builder</classname> class
                    is used to create proxy definitions. The methods you can use
                    to define a proxy have a fluent interface.</para>
                <glosslist>
                    <glossentry>
                        <glossterm><methodname>setCallParentConstructor</methodname></glossterm>
                        <glossdef><para>Sets whether the proxy should call the parent class constructor upon instantiation. If the proxy lacks a parent class, this option has no effect.</para></glossdef>
                    </glossentry>
                    <glossentry>
                        <glossterm><methodname>setHandler</methodname></glossterm>
                        <glossdef><para>This method receives the <interfacename>Xyster\Type\Proxy\IHandler</interfacename> that will be used by the proxy.</para></glossdef>
                    </glossentry>
                    <glossentry>
                        <glossterm><methodname>setInterfaces</methodname></glossterm>
                        <glossdef><para>Sets the list of interfaces that this proxy will implement. This must be an array of <classname>Xyster\Type\Type</classname> objects.</para></glossdef>
                    </glossentry>
                    <glossentry>
                        <glossterm><methodname>setParent</methodname></glossterm>
                        <glossdef><para>Sets the parent class from which the proxy will extend.</para></glossdef>
                    </glossentry>
                </glosslist>
                <para>After the builder has been configured, you can call the <methodname>create</methodname> method
                    with any arguments the constructor of the parent class may need. The <methodname>createType</methodname> will just return
                    the type information and not an instantiated proxy object.</para>
                <para>If the static <methodname>setCache</methodname> method is called,
                    the builder will store generated classes and re-use them if another builder
                    is configured with the same details (parent class, interfaces, handler used, and
                    whether to call the parent constructor).</para>
            </sect2>
        </sect1>