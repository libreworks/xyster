<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="xyster.container.overview">
    <title>Overview</title>

    <para>Dependency Injection is a process by which the components a class uses
        are supplied to it by a container instead of the class itself locating
        them. This allows a ton of flexibility for testing, special cases, and
        polymorhpism, and it follows the &quot;tell, don't ask&quot; software
        design principle. The Xyster Framework provides a Dependency Injection
        container system. Containers implement <interfacename>Xyster\Container\IContainer</interfacename>
        and may implement <interfacename>Xyster\Container\IMutable</interfacename>.</para>

    <sect2 id="xyster.container.overview.example">
        <title>Example</title>

        <para>Here's an example of how you might use the container. (This
            example is adapted from one listed on the PicoContainer site).</para>

        <programlisting><![CDATA[<?php
interface Peelable {
    function peel();
}
class Apple implements Peelable {
    public function peel()
    {
    }
}
class Peeler {
    private $_peelable;
    public function __construct(Peelable $peelable)
    {
        $this->_peelable = $peelable;
    }
}
class Juicer {
    private $_peelable;
    private $_peeler;
    public function __construct(Peelable $peelable, Peeler $peeler)
    {
        $this->_peelable = $peelable;
        $this->_peeler = $peeler;
    }
}

// Add components:

$container = new Xyster_Container;
$container->autowire("Apple");
$container->autowire("Juicer");
$container->autowire("Peeler");

// Get component with dependencies injected:

$juicer = $container->getComponent("Juicer");]]></programlisting>

    <sect2 id="xyster.container.overview.concepts">
        <title>Parts Overview</title>

        <para>There are several different pieces that comprise the container system.</para>

        <glosslist>
            <glossentry>
                <glossterm>Definition</glossterm>
                <glossdef><simpara>The definition is contains all of the metadata
                    about a component in the container: any constructor arguments,
                    scalar properties, dependencies on other components, and its
                    initialization method.</simpara></glossdef>
            </glossentry>
            <glossentry>
                <glossterm>Provider</glossterm>
                <glossdef><simpara>Providers are responsible for creating instances
                    of components. Some providers are delegates which wrap new
                    behaviors around other providers, such as caching, or AOP.</simpara></glossdef>
            </glossentry>
            <glossentry>
                <glossterm>Injector</glossterm>
                <glossdef><simpara>Injectors are specific providers which are
                    responsible for creating objects, passing values to their
                    constructors, assigning all of their properties and
                    dependencies, as well as calling their initialization methods.</simpara></glossdef>
            </glossentry>
        </glosslist>
    </sect2>
</sect1>