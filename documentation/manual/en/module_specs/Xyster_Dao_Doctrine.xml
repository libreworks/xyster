<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="xyster.dao.doctrine">
    <title>Doctrine Support</title>

    <para>Doctrine is a very capable ORM system for PHP. Doctrine 2 provides
        support for PHP 5.3. Xyster supplies a base DAO that can be used for
        interaction with Doctrine 2. The
        <classname>Xyster\Dao\Doctrine2\Doctrine2Dao</classname>
        can either be used as-is or extended for custom business logic.</para>

    <sect2 id="xyster.dao.doctrine.creating">
        <title>Creating</title>

        <para>An instance of <classname>Xyster\Dao\Doctrine2\Doctrine2Dao</classname>
            is meant to be used with one entity class. When the DAO is created,
            it needs certain information provided, and then have its <methodname>init</methodname>
            method called. Below are the required properties.</para>

        <itemizedlist>
            <listitem><simpara><property>entityClass</property> – The class of the entity
                for which the DAO is responsible. This can either be a
                <classname>ReflectionClass</classname>, a <classname>Xyster\Type\Type</classname>,
                or the class name as a string.</simpara></listitem>
            <listitem>
                <simpara><property>entityManager</property> – A
                    <classname>Doctrine\ORM\EntityManager</classname> that allows
                    the DAO to communicate with Doctrine.</simpara></listitem>
        </itemizedlist>

        <para>When the DAO has its <methodname>init</methodname> method called,
            The class and entity manager are verified, then a <classname>Doctrine\ORM\EntityRepository</classname>
            is retrieved for the entity class specified.</para>

        <para>Preferrably, you would want to have the DAO created under some kind
            of Dependency Injection mechanism, for instance using
            <interfacename>Xyster\Container\IContainer</interfacename>.</para>
    </sect2>

    <sect2 id="xyster.dao.doctrine.api">
        <title>API</title>
        
        <para>Most of the operations needed to create, retrieve, update, and delete
            entities are implemented in <classname>Doctrine2Dao</classname>, however
            if you want to extend this class (for instance, you have an entity which
            cannot be updated and you want to throw an Exception if the
            <methodname>update</methodname> or <methodname>merge</methodname> methods are called)
            you have the ability to do so.</para>
        
        <para>Internally, most of the features of the <classname>Doctrine2Dao</classname> are
            backed by two protected methods, <methodname>doExecute</methodname> and
            <methodname>doExecuteInRepository</methodname>. Both of these methods take
            a Closure, the former calls the Closure with the <classname>Doctrine\ORM\EntityManager</classname>
            as its argument, and the latter calls the Closure with the <classname>Doctrine\ORM\EntityRepository</classname>.
            Both of these methods catch Exceptions and perform translation upon them.</para>
    </sect2>

    <sect2 id="xyster.dao.doctrine.exceptions">
        <title>Exception Translation</title>

        <para>The DAO that works with Doctrine converts Doctrine exceptions into
            the generic ones supplied in the <package>Xyster\Dao</package> package.
            When an exception in translated, it retains the original message and code,
            and the source exception is passed as the "previous". These are the mappings.</para>

        <itemizedlist>
            <listitem>
                <simpara>
                    <exceptionname>Doctrine\ORM\EntityNotFoundException</exceptionname>,
                    <exceptionname>Doctrine\ORM\NoResultException</exceptionname>,
                    and <exceptionname>Doctrine\ORM\NonUniqueResultException</exceptionname>
                    are translated into a <exceptionname>Xyster\Dao\DataRetrievalException</exceptionname>.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    <exceptionname>Doctrine\ORM\PessimisticLockException</exceptionname> and
                    <exceptionname>Doctrine\ORM\OptimisticLockException</exceptionname> are
                    translated into a <exceptionname>Xyster\Dao\ConcurrencyException</exceptionname>.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    <exceptionname>Doctrine\ORM\Query\QueryException</exceptionname> is
                    translated into a <exceptionname>Xyster\Dao\InvalidResourceUsageException</exceptionname>.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    Anything else is translated into a <exceptionname>Xyster\Dao\Doctrine2\DoctrineSystemException</exceptionname>.
                </simpara>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>