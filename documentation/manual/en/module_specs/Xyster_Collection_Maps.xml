	<sect1 id="xyster.collection.maps">
            <title>Maps</title>

            <para><interface>Xyster\Collection\IMap</interface>-based objects have keys instead of numbers like
		        a list (although the keys could be numbersâ€¦ they can be any value).</para>

    	    <para><interface>Xyster\Collection\IMap</interface> objects implement <interface>ArrayAccess</interface> (defined in the
    		PHP SPL), which means you can get items inside via array style.</para>

    	    <programlisting role="php"><![CDATA[<?php
// if $map is a Xyster\Collection\IMap

echo 'Number of entries: ' . count($map) . "\n";

foreach( $map->keys() as $key ) {
        printf("key: %s, value: %s\n", $key, $map->get($key));
}
]]></programlisting>

    		<sect2 id="xyster.collection.maps.string">
    			<title>String Maps</title>
    			
    			<para>These are also called hash tables and associative arrays. You can use a string map
    				just like you would use a PHP array, except you can also treat it like an object.</para>

    		    <programlisting role="php"><![CDATA[<?php
if ( isset($map['test']) ) { // or $map->containsKey('test')
        echo $map['test'];
}

echo 'Find key for value: ' . $map->keyFor('search value');
echo 'Find all keys for value: ' . implode(', ', $map->keysFor('search value'));

$aliases = new \Xyster\Collection\StringMap();
$aliases['batman'] = 'Bruce';
$aliases['wolverine'] = 'Logan';
$aliases['wonderwoman'] = 'Diana';
$aliases['gambit'] = 'Remy';

$more = new \Xyster\Collection\StringMap();
$more['doom'] = 'Victor';
$more['spidey'] = 'Peter';
$more['shazam'] = 'Billy';

$aliases->merge($more); 

// to remove, use
unset($aliases['doom']);
// because is easier than
$aliases->remove('doom');
]]></programlisting>

		</sect2>

		<sect2 id="xyster.collection.maps.object">
			<title>Object Maps</title>

			<para>Maps with objects as keys are what you have in strongly-typed languages. In Java or .NET,
				for instance, everything is an object including strings and integers.
				<classname>Xyster\Collection\Map</classname> is the default implementation of this type of map.
				Note that PHP's <interface>ArrayAccess</interface> syntax doesn't work for objects as keys.
				Because of this, you are limited to using the <methodname>get</methodname>, <methodname>set</methodname>,
				<methodname>remove</methodname>, and <methodname>containsKey</methodname> methods only.</para>

			<para>Using objects as keys is invaluable for preventing key collisions. Each object is used
				uniquely as a key, so two different instances of the same class with the same property
				values are two different keys.</para>
		</sect2>
        </sect1>
