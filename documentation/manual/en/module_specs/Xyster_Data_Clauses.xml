	<sect1 id="xyster.data.clauses">
            <title>Symbol Clauses</title>

            <para>A clause is a container for multiple symbols.  There are three
                clauses available in the framework.  You can iterate
                through the clause using a <code>foreach</code> block.</para>

            <sect2 id="xyster.data.clauses.junction">
                <title>Junction</title>

                <para>The <classname>Xyster\Data\Symbol\Junction</classname> was
                    mentioned previously as containing multiple
                    <classname>Xyster\Data\Symbol\Criterion</classname> objects.  It is
                    unique among the Clause classes in that it can hold other
                    Junction objects.</para>

                <programlisting role="php"><![CDATA[<?php
$junction = \Xyster\Data\Symbol\Junction::all(\Xyster\Data\Symbol\Expression::eq('foo', 'bar'),
    \Xyster\Data\Symbol\Expression::neq('abc', 123));
echo count($junction); // prints 2
foreach( $junction as $criterion ) {
    echo $criterion . PHP_EOL;
}
]]></programlisting>

            </sect2>
            
            <sect2 id="xyster.data.clauses.field">
                <title>Field Clause</title>
                
                <para><classname>Xyster\Data\Symbol\FieldClause</classname> can contain
                    any <classname>Xyster\Data\Symbol\Field</classname>
                    object.  This includes regular fields, aggregate fields, and
                    grouped fields (since aggregate and group fields inherit
                    from the first).</para>
                
                <para>If no parameter is passed to the constructor of the object,
                    it is created with no elements.  You can then add fields to
                    it manually.</para>
                    
                <programlisting role="php"><![CDATA[<?php
$clause = new \Xyster\Data\Symbol\FieldClause();
$clause->add(\Xyster\Data\Symbol\Field::named('foo'))
    ->add(\Xyster\Data\Symbol\Field::named('bar'));
]]></programlisting>

                <para>You can also pass a <classname>Xyster\Data\Symbol\Field</classname>
                    object or another Field Clause into the constructor to have
                    those items automatically added.</para> 

                <programlisting role="php"><![CDATA[<?php
// merging with $clause from our example above
$clause2 = new \Xyster\Data\Symbol\FieldClause($clause);
echo count($clause2); // prints 2
]]></programlisting>

                <para>You can add or remove fields from a Field Clause using the 
                    <methodname>add</methodname> and <methodname>remove</methodname>
                    methods.  You can also copy all the items from one clause
                    into another using the <methodname>merge</methodname> method.</para>

            </sect2>
            
            <sect2 id="xyster.data.clauses.sort">
                <title>Sort Clause</title>
                
                <para>The <classname>Xyster\Data\Symbol\SortClause</classname> can
                    contain any <classname>Xyster\Data\Symbol\Sort</classname> object.</para>
                
                <para>If no parameter is passed to the constructor of the object,
                    it is created with no elements.  You can then add sorts to
                    it manually.</para>
                    
                <programlisting role="php"><![CDATA[<?php
$clause = new \Xyster\Data\Symbol\SortClause();
$clause->add(\Xyster\Data\Symbol\Sort::asc('foo'))
    ->add(\Xyster\Data\Symbol\Sort::desc('bar'));
]]></programlisting>

                <para>You can also pass a <classname>Xyster\Data\Symbol\Sort</classname>
                    object or another Sort Clause into the constructor to have
                    those items automatically added.</para> 

                <programlisting role="php"><![CDATA[<?php
// merging with $clause from our example above
$clause2 = new \Xyster\Data\Sort\Clause($clause);
echo count($clause2); // prints 2
]]></programlisting>

                <para>You can add or remove sorts from a Sort Clause using the 
                    <methodname>add</methodname> and <methodname>remove</methodname>
                    methods.  You can also copy all the items from one clause
                    into another using the <methodname>merge</methodname> method.</para>

            </sect2>
        </sect1>
