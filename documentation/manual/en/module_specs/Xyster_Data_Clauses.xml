	<sect1 id="xyster.data.clauses">
            <title>Symbol Clauses</title>

            <para>A clause is a container for multiple symbols.  There are three
                clauses available in the framework.  You can iterate
                through the clause using a <code>foreach</code> block.</para>

            <sect2 id="xyster.data.clauses.junction">
                <title>Xyster_Data_Junction</title>

                <para>The Junction was mentioned previously as containing multiple
                    <classname>Xyster_Data_Criterion</classname> objects.  It is
                    unique among the Clause classes in that it can hold other
                    Junction objects.</para>

                <programlisting role="php"><![CDATA[<?php
$junction = Xyster_Data_Junction::all(Xyster_Data_Expression::eq('foo', 'bar'),
    Xyster_Data_Expression::neq('abc', 123));
echo count($junction); // prints 2
foreach( $junction as $criterion ) {
    echo $criterion . "\n";
}
]]></programlisting>

            </sect2>
            
            <sect2 id="xyster.data.clauses.field">
                <title>Xyster_Data_Field_Clause</title>
                
                <para>The Field Clause can contain any <classname>Xyster_Data_Field</classname>
                    object.  This includes regular fields, aggregate fields, and
                    grouped fields (since aggregate and group fields inherit
                    from the first).</para>
                
                <para>If no parameter is passed to the constructor of the object,
                    it is created with no elements.  You can then add fields to
                    it manually.</para>
                    
                <programlisting role="php"><![CDATA[<?php
require_once 'Xyster/Data/Field/Clause.php';
$clause = new Xyster_Data_Field_Clause();
$clause->add(Xyster_Data_Field::named('foo'))
    ->add(Xyster_Data_Field::named('bar'));
]]></programlisting>

                <para>You can also pass a <classname>Xyster_Data_Field</classname>
                    object or another Field Clause into the constructor to have
                    those items automatically added.</para> 

                <programlisting role="php"><![CDATA[<?php
// merging with $clause from our example above
$clause2 = new Xyster_Data_Field_Clause($clause);
echo count($clause2); // prints 2
]]></programlisting>

                <para>You can add or remove fields from a Field Clause using the 
                    <methodname>add</methodname> and <methodname>remove</methodname>
                    methods.  You can also copy all the items from one clause
                    into another using the <methodname>merge</methodname> method.</para>

            </sect2>
            
            <sect2 id="xyster.data.clauses.sort">
                <title>Xyster_Data_Sort_Clause</title>
                
                <para>The Sort Clause can contain any <classname>Xyster_Data_Sort</classname>
                    object.</para>
                
                <para>If no parameter is passed to the constructor of the object,
                    it is created with no elements.  You can then add sorts to
                    it manually.</para>
                    
                <programlisting role="php"><![CDATA[<?php
require_once 'Xyster/Data/Sort/Clause.php';
$clause = new Xyster_Data_Sort_Clause();
$clause->add(Xyster_Data_Sort::asc('foo'))
    ->add(Xyster_Data_Sort::desc('bar'));
]]></programlisting>

                <para>You can also pass a <classname>Xyster_Data_Sort</classname>
                    object or another Sort Clause into the constructor to have
                    those items automatically added.</para> 

                <programlisting role="php"><![CDATA[<?php
// merging with $clause from our example above
$clause2 = new Xyster_Data_Sort_Clause($clause);
echo count($clause2); // prints 2
]]></programlisting>

                <para>You can add or remove sorts from a Sort Clause using the 
                    <methodname>add</methodname> and <methodname>remove</methodname>
                    methods.  You can also copy all the items from one clause
                    into another using the <methodname>merge</methodname> method.</para>

            </sect2>
        </sect1>
