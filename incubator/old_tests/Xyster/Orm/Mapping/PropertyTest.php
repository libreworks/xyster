<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Mapping_PropertyTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Mapping_PropertyTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Mapping/Property.php';

/**
 * Test class for Xyster_Orm_Mapping_Property.
 * Generated by PHPUnit on 2008-07-27 at 14:03:21.
 */
class Xyster_Orm_Mapping_PropertyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Mapping_Property
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Mapping_PropertyTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Orm_Mapping_Property;
    }
    
    /**
     * Tests the methods having to do with the Value
     */
    public function testValueMethods()
    {
        require_once 'Xyster/Db/Column.php';
        $col = new Xyster_Db_Column('foobar');
        require_once 'Xyster/Orm/Mapping/Value.php';
        $val = new Xyster_Orm_Mapping_Value();
        $val->addColumn($col);
        require_once 'Xyster/Orm/Type/String.php';
        $type = new Xyster_Orm_Type_String;
        $val->setType($type);
        
        $return = $this->object->setValue($val);
        $this->assertSame($this->object, $return);
        $this->assertSame($val, $this->object->getValue());
        $this->assertSame($type, $this->object->getType());
        $this->assertEquals(1, $this->object->getColumnSpan());
        $this->assertEquals(new ArrayIterator(array($col)), $this->object->getColumnIterator());
    }

    /**
     * Tests the 'getGeneration' and 'setGeneration' methods
     */
    public function testGetAndSetGeneration()
    {
        require_once 'Xyster/Orm/Mapping/Generation.php';
        $generation = Xyster_Orm_Mapping_Generation::Always();
        $this->assertSame(Xyster_Orm_Mapping_Generation::Never(), $this->object->getGeneration());
        $this->object->setGeneration($generation);
        $this->assertSame($generation, $this->object->getGeneration());
    }
    
    /**
     * Tests the 'getWrapper' and 'setWrapper' methods
     */
    public function testGetAndSetWrapper()
    {
        require_once 'Xyster/Type/Property/Direct.php';
        $mapper = new Xyster_Type_Property_Direct('foobar');
        $return = $this->object->setWrapper($mapper);
        $this->assertSame($this->object, $return);
        $this->assertSame($mapper, $this->object->getWrapper());
    }

    /**
     * Tests the 'getName' and 'setName' methods
     */
    public function testGetAndSetName()
    {
        $this->assertSame($this->object, $this->object->setName('test123'));
        $this->assertEquals('test123', $this->object->getName());
    }

    /**
     * Tests the 'getEntityMapping' and 'setEntityMapping' methods
     */
    public function testGetAndSetPersistentClass()
    {
        require_once 'Xyster/Orm/Mapping/Class.php';
        $pc = new Xyster_Orm_Mapping_Class;
        $this->assertSame($this->object, $this->object->setEntityMapping($pc));
        $this->assertSame($pc, $this->object->getEntityMapping());
    }

    /**
     * Tests the 'isComposite' method
     */
    public function testIsComposite()
    {
        require_once 'Xyster/Orm/Mapping/Component.php';
        $val = new Xyster_Orm_Mapping_Component;
        $this->object->setValue($val);
        
        $this->assertTrue($this->object->isComposite());
    }

    /**
     * Tests the 'isLazy' and 'setLazy' methods
     */
    public function testIsAndSetLazy()
    {
        $this->assertFalse($this->object->isLazy());
        $this->assertSame($this->object, $this->object->setLazy());
        $this->assertTrue($this->object->isLazy());
        $this->assertSame($this->object, $this->object->setLazy(false));
        $this->assertFalse($this->object->isLazy());
    }
    
    /**
     * Tests the 'isOptimisticLocked' and 'setOptimisticLocked' methods
     */
    public function testIsAndSetOptimisticLocked()
    {
        $this->assertFalse($this->object->isOptimisticLocked());
        $this->assertSame($this->object, $this->object->setOptimisticLocked());
        $this->assertTrue($this->object->isOptimisticLocked());
        $this->assertSame($this->object, $this->object->setOptimisticLocked(false));
        $this->assertFalse($this->object->isOptimisticLocked());
    }
    
    /**
     * Tests the 'isOptional' and 'setOptional' methods
     */
    public function testIsAndSetOptional()
    {
        require_once 'Xyster/Db/Column.php';
        $col = new Xyster_Db_Column('foobar');
        require_once 'Xyster/Orm/Mapping/Value.php';
        $val = new Xyster_Orm_Mapping_Value();
        $val->addColumn($col);
        require_once 'Xyster/Orm/Type/String.php';
        $type = new Xyster_Orm_Type_String;
        $val->setType($type);
        
        $this->object->setValue($val);
        $this->assertTrue($this->object->isOptional());
        $this->object->setOptional(false);
        $this->assertTrue($this->object->isOptional());
        $col->setNullable(false);
        $this->assertFalse($this->object->isOptional());
    }
    
    /**
     * Tests the 'isBackRef' method
     */
    public function testIsBackRef()
    {
        $this->assertFalse($this->object->isBackRef());
    }
}

// Call Xyster_Orm_Mapping_PropertyTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Mapping_PropertyTest::main') {
    Xyster_Orm_Mapping_PropertyTest::main();
}
