<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Tuplizer_ComponentTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Tuplizer_ComponentTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Tuplizer/Component.php';
require_once 'Xyster/Orm/Mapping/Component.php';
require_once 'Xyster/Orm/Mapping/Property.php';
require_once 'Xyster/Type/Property/Method.php';
require_once '_files/TuplizerTestExample.php';

/**
 * Test class for Xyster_Orm_Tuplizer_Component.
 * Generated by PHPUnit on 2008-08-17 at 10:32:05.
 */
class Xyster_Orm_Tuplizer_ComponentTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Tuplizer_Component
     */
    protected $object;
    
    /**
     * @var Xyster_Orm_Mapping_Component
     */
    protected $component;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Tuplizer_ComponentTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $name= new Xyster_Orm_Mapping_Property;
        $name->setName('name')->setWrapper(new Xyster_Type_Property_Method('name'));
        $age = new Xyster_Orm_Mapping_Property;
        $age->setName('age')->setWrapper(new Xyster_Type_Property_Method('age'));
        $gender = new Xyster_Orm_Mapping_Property;
        $gender->setName('gender')->setWrapper(new Xyster_Type_Property_Method('gender'));
        $component = new Xyster_Orm_Mapping_Component;
        $component->setComponentType(new Xyster_Type('TuplizerTestExample'));
        $component->addProperty($name)->addProperty($age)->addProperty($gender);
        $this->component = $component;
        
        $this->object = new Xyster_Orm_Tuplizer_Component($component);
    }

    /**
     * Tests the 'getMappedType' method
     */
    public function testGetMappedType()
    {
        $this->assertSame($this->component->getComponentType(), $this->object->getMappedType());
    }

    /**
     * Tests the 'getParent' and 'setParent' methods
     */
    public function testGetAndSetParent()
    {
        $this->component->setParentProperty('parent');
        $this->object = new Xyster_Orm_Tuplizer_Component($this->component);
        $this->assertTrue($this->object->hasParentProperty());
        
        $ex = new TuplizerTestExample;
        $this->object->setParent($ex, 'foo');
        $this->assertEquals('foo', $this->object->getParent($ex)); 
    }

    /**
     * Tests the 'getPropertyValue' method
     */
    public function testGetPropertyValue()
    {
        $ex = new TuplizerTestExample;
        $ex->setAge(50);
        $ex->setName('Bob');
        $ex->setGender('Male');
        
        $this->assertEquals('Bob', $this->object->getPropertyValue($ex, 0));
        $this->assertEquals(50, $this->object->getPropertyValue($ex, 1));
        $this->assertEquals('Male', $this->object->getPropertyValue($ex, 2));
    }

    /**
     * Tests the 'getPropertyValues' method
     */
    public function testGetPropertyValues()
    {
        $ex = new TuplizerTestExample;
        $ex->setAge(50);
        $ex->setName('Bob');
        $ex->setGender('Male');
        
        $values = $this->object->getPropertyValues($ex);
        $this->assertEquals(array('Bob', 50, 'Male'), $values);
    }

    /**
     * Tests the 'hasParentProperty' method
     */
    public function testHasParentProperty()
    {
        $this->assertFalse($this->object->hasParentProperty());
    }

    /**
     * Tests the 'instantiate' method
     */
    public function testInstantiate()
    {
        $ex = $this->object->instantiate();
        $this->assertType('TuplizerTestExample', $ex);
    }

    /**
     * Tests the 'isInstance' method
     */
    public function testIsInstance()
    {
        $ex = new TuplizerTestExample;
        $this->assertTrue($this->object->isInstance($ex));
        $this->assertFalse($this->object->isInstance($this));
        $this->assertFalse($this->object->isInstance(false));
    }

    /**
     * Tests the 'setPropertyValues' method
     */
    public function testSetPropertyValues()
    {
        $ex = new TuplizerTestExample;
        $values = array('Alice', 30, 'Female');
        $this->object->setPropertyValues($ex, $values);
        $this->assertEquals('Alice', $ex->getName());
        $this->assertEquals(30, $ex->getAge());
        $this->assertEquals('Female', $ex->getGender());
    }
}

// Call Xyster_Orm_Tuplizer_ComponentTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Tuplizer_ComponentTest::main') {
    Xyster_Orm_Tuplizer_ComponentTest::main();
}
