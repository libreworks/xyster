<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Engine_StatusTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Engine_StatusTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Engine/Status.php';

/**
 * Test class for Xyster_Orm_Engine_Status.
 * Generated by PHPUnit on 2008-10-06 at 16:56:58.
 */
class Xyster_Orm_Engine_StatusTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Engine_Status
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Engine_StatusTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }


    /**
     * Tests the 'deleted' method
     */
    public function testDeleted()
    {
        $enum = Xyster_Orm_Engine_Status::Deleted();
        $this->_runTests($enum, 'Deleted', 0);
    }

    /**
     * Tests the 'gone' method
     */
    public function testGone()
    {
        $enum = Xyster_Orm_Engine_Status::Gone();
        $this->_runTests($enum, 'Gone', 1);
    }

    /**
     * Tests the 'loading' method
     */
    public function testLoading()
    {
        $enum = Xyster_Orm_Engine_Status::Loading();
        $this->_runTests($enum, 'Loading', 2);
        
    }

    /**
     * Tests the 'managed' method
     */
    public function testManaged()
    {
        $enum = Xyster_Orm_Engine_Status::Managed();
        $this->_runTests($enum, 'Managed', 3);
    }

    /**
     * Tests the 'readOnly' method
     */
    public function testReadOnly()
    {
        $enum = Xyster_Orm_Engine_Status::ReadOnly();
        $this->_runTests($enum, 'ReadOnly', 4);
    }

    /**
     * Tests the 'saving' method
     */
    public function testSaving()
    {   
        $enum = Xyster_Orm_Engine_Status::Saving();
        $this->_runTests($enum, 'Saving', 5);
    }

    /**
     * Runs the unit tests on an enum
     *
     * @param Xyster_Enum $actual
     * @param string $name
     * @param mixed $value
     */
    protected function _runTests( Xyster_Orm_Engine_Status $actual, $name, $value )
    {
        $this->assertEquals($name, $actual->getName());
        $this->assertEquals($value, $actual->getValue());
        $this->assertEquals('Xyster_Orm_Engine_Status ['.$value.','.$name.']', (string)$actual);
        $this->assertSame($actual, Xyster_Enum::parse('Xyster_Orm_Engine_Status', $name));
        $this->assertSame($actual, Xyster_Enum::valueOf('Xyster_Orm_Engine_Status', $value));
    }
}

// Call Xyster_Orm_Engine_StatusTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Engine_StatusTest::main') {
    Xyster_Orm_Engine_StatusTest::main();
}
