<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   Xyster_Orm
 * @copyright Copyright (c) Xyster contributors
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
/**
 * @see Xyster_Orm_Meta_IValue
 */
require_once 'Xyster/Orm/Meta/IValue.php';
/**
 * A combination of an ORM Type and one or more Columns.
 *
 * @category  Xyster
 * @package   Xyster_Orm
 * @copyright Copyright (c) Xyster contributors
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 */
class Xyster_Orm_Meta_Value_Basic implements Xyster_Orm_Meta_IValue
{
    /**
     * @var Xyster_Db_Column[]
     */
    protected $_columns = array();
    
    /**
     * @var Xyster_Db_Table
     */
    protected $_table;
    
    /**
     * @var Xyster_Orm_Type_IType
     */
    protected $_type;
    
    /**
     * @var boolean
     */
    protected $_nullable = true;
    
    /**
     * Creates a basic value.
     * 
     * @param Xyster_Db_Table $table The table to which this value belongs.
     * @param Xyster_Orm_Type_IType $type The type generated by this value.
     * @param array $columns Array of {@link Xyster_Db_Column} objects. The columns the value holds.
     */    
    public function __construct(Xyster_Db_Table $table, Xyster_Orm_Type_IType $type, array $columns)
    {
        $this->_table = $table;
        $this->_type = $type;
        foreach( $columns as $column ) {
            if ( !in_array($column, $this->_columns, true) ) {
                if ( !$column->isNullable() ) {
                    $this->_nullable = false;
                }
                $this->_columns[] = $column;
            }
        }
    }
    
    /**
     * Gets the columns in the type.
     *
     * @return Traversable containing {@link Xyster_Db_Column} objects
     */
    public function getColumns()
    {
        return new ArrayIterator($this->_columns);
    }
    
    /**
     * Gets the number of columns in the value
     *
     * @return int
     */
    public function getColumnSpan()
    {
        return count($this->_columns);
    }
    
    /**
     * Gets the table associated with this value
     *
     * @return Xyster_Db_Table
     */
    public function getTable()
    {
        return $this->_table;
    }
    
    /**
     * Gets the underlying ORM type
     *
     * @return Xyster_Orm_Type_IType
     */
    public function getType()
    {
        return $this->_type;
    }
        
    /**
     * Gets whether this type is nullable
     *
     * @return boolean
     */
    public function isNullable()
    {
        return $this->_nullable;
    }
}