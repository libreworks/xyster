<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Tuplizer_EntityTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Tuplizer_EntityTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Tuplizer/Entity.php';
require_once 'Xyster/Orm/Session/Factory/Interface.php';
require_once 'Xyster/Orm/Runtime/EntityMeta.php';
require_once 'Xyster/Orm/Mapping/Entity.php';
require_once 'Xyster/Orm/Mapping/Component.php';
require_once 'Xyster/Orm/Mapping/Property.php';
require_once 'Xyster/Orm/Mapping/Value.php';
require_once 'Xyster/Orm/Tuplizer/Component.php';
require_once 'Xyster/Orm/Type/String.php';
require_once 'Xyster/Orm/Type/Integer.php';
require_once 'Xyster/Data/Field/Mapper/Method.php';
require_once '_files/TuplizerTestExample.php';

/**
 * Test class for Xyster_Orm_Tuplizer_Entity.
 * Generated by PHPUnit on 2008-09-10 at 22:15:33.
 */
class Xyster_Orm_Tuplizer_EntityTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Tuplizer_Entity
     */
    protected $object;
    
    /**
     * @var Xyster_Orm_Mapping_Entity
     */
    protected $mapping;
    
    /**
     * @var Xyster_Orm_Runtime_EntityMeta
     */
    protected $meta;
    
    protected $factory;
    
    protected $componentType;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Tuplizer_EntityTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $factory = $this->getMock('Xyster_Orm_Session_Factory_Interface');
        $this->factory = $factory;
        $this->mapping = new Xyster_Orm_Mapping_Entity();
        $this->mapping->setClassName('TuplizerTestExample');
        
        $integer = new Xyster_Orm_Type_Integer;
        $string = new Xyster_Orm_Type_String;
        
        $idVal = new Xyster_Orm_Mapping_Value();
        $idVal->setType($integer);
        $id = new Xyster_Orm_Mapping_Property();
        $id->setName('id')->setValue($idVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('id'));
        $nameVal = new Xyster_Orm_Mapping_Value();
        $nameVal->setType($string);
        $name= new Xyster_Orm_Mapping_Property;
        $name->setName('name')->setValue($nameVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('name'));
        $ageVal = new Xyster_Orm_Mapping_Value();
        $ageVal->setType($integer);
        $age = new Xyster_Orm_Mapping_Property;
        $age->setName('age')->setValue($ageVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('age'));
        $genderVal = new Xyster_Orm_Mapping_Value();
        $genderVal->setType($string);
        $gender = new Xyster_Orm_Mapping_Property;
        $gender->setName('gender')->setValue($genderVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('gender'));
        $versionVal = new Xyster_Orm_Mapping_Value();
        $versionVal->setType($integer);
        $version = new Xyster_Orm_Mapping_Property();
        $version->setName('version')->setValue($versionVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('version'));
            
        $addressVal = new Xyster_Orm_Mapping_Value();
        $addressVal->setType($string);
        $address = new Xyster_Orm_Mapping_Property();
        $address->setName('address')->setValue($addressVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('address'));
        $cityVal = new Xyster_Orm_Mapping_Value();
        $cityVal->setType($string);
        $city = new Xyster_Orm_Mapping_Property();
        $city->setName('city')->setValue($cityVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('city'));
        $zipVal = new Xyster_Orm_Mapping_Value();
        $zipVal->setType($integer);
        $zip = new Xyster_Orm_Mapping_Property();
        $zip->setName('zip')->setValue($zipVal)
            ->setMapper(new Xyster_Data_Field_Mapper_Method('zip'));            
        $componentVal = new Xyster_Orm_Mapping_Component();
        $componentVal->addProperty($address)->addProperty($city)
            ->addProperty($zip)
            ->setTuplizerType(new Xyster_Type('Xyster_Orm_Tuplizer_Component'))
            ->setComponentType(new Xyster_Type('TuplizerTestExampleComponent'));
        $this->componentType = $componentVal;
        $component = new Xyster_Orm_Mapping_Property();
        $component->setValue($componentVal)->setName('component')
            ->setMapper(new Xyster_Data_Field_Mapper_Method('component'));
        
        $this->mapping->setIdentifier($id)->addProperty($name)
            ->addProperty($age)->addProperty($gender)->addProperty($version)
            ->addProperty($component)->setVersion($version)->setLazy(true);
        
        $this->meta = new Xyster_Orm_Runtime_EntityMeta($this->mapping, $factory);
        $this->object = new Xyster_Orm_Tuplizer_Entity($this->meta, $this->mapping);
    }

    /**
     * @todo Implement testCreateProxy().
     */
    public function testCreateProxy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'getComponentValue' method
     */
    public function testGetComponentValue()
    {
        $comp = new TuplizerTestExampleComponent();
        $comp->setZip(12345);
        
        $object = new TuplizerTestExample();
        $object->setComponent($comp);
        
        $type = $this->componentType->getType();
        $this->assertEquals(12345,
            $this->object->getPropertyValue($object, 'component.zip'));
    }
    
    /**
     * Tests the 'getComponentValue' method with a bad name
     */
    public function testGetComponentValueBadName()
    {
        $type = $this->componentType->getType();
        $object = new TuplizerTestExample();
        $this->setExpectedException('Xyster_Orm_Exception', 'Property not found: foobar');
        $this->object->getComponentValue($type, $object, 'foobar');
    }

    /**
     * Tests the 'getEntityName' method
     */
    public function testGetEntityName()
    {
        $this->assertEquals('TuplizerTestExample', $this->object->getEntityName());
    }

    /**
     * Tests the 'getFactory' method
     */
    public function testGetFactory()
    {
        $this->assertSame($this->factory, $this->object->getFactory());
    }

    /**
     * Tests the 'getIdentifier' method
     */
    public function testGetIdentifier()
    {
        $object = new TuplizerTestExample();
        $object->setId(5);
        $this->assertEquals(5, $this->object->getIdentifier($object));
    }

    /**
     * Tests the 'getMappedType' method
     */
    public function testGetMappedType()
    {
        $type = $this->object->getMappedType();
        $this->assertType('Xyster_Type', $type);
        $this->assertEquals('TuplizerTestExample', $type->getName());
    }

    /**
     * Tests the 'getPropertyValue' method
     */
    public function testGetPropertyValue()
    {
        $object = new TuplizerTestExample();
        $object->setAge(15);
        $object->setName('Bob');
        
        $this->assertEquals(15, $this->object->getPropertyValue($object, 1));
        $this->assertEquals('Bob', $this->object->getPropertyValue($object, 'name'));
    }

    /**
     * Tests the 'getPropertyValues' method
     */
    public function testGetPropertyValues()
    {
        $expected = array('Bob', 30, 'M', 2, null);
        $object = new TuplizerTestExample();
        $object->setName('Bob');
        $object->setAge(30);
        $object->setGender('M');
        $object->setVersion(2);
        $object->setId(1);
        $vals = $this->object->getPropertyValues($object);
        $this->assertEquals($expected, $vals);
    }

    /**
     * Tests the 'getVersion' method
     */
    public function testGetVersion()
    {
        $object = new TuplizerTestExample();
        $object->setVersion(4);
        $this->assertEquals(4, $this->object->getVersion($object));
    }

    /**
     * Tests the 'hasProxy' method
     */
    public function testHasProxy()
    {
        $this->assertTrue($this->object->hasProxy());
    }

    /**
     * @todo Implement testHasUninitializedLazyProperties().
     */
    public function testHasUninitializedLazyProperties()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'instantiate' method
     */
    public function testInstantiate()
    {
        $result = $this->object->instantiate();
        $this->assertType('TuplizerTestExample', $result);
        $this->assertNull($result->getId());
    }

    /**
     * Tests the 'instantiateWithId' method
     */
    public function testInstantiateWithId()
    {
        $result = $this->object->instantiateWithId(1);
        $this->assertType('TuplizerTestExample', $result);
        $this->assertEquals(1, $result->getId());
    }

    /**
     * Tests the 'inInstance' method
     */
    public function testIsInstance()
    {
        $this->assertFalse($this->object->isInstance(null));
        $this->assertTrue($this->object->isInstance(new TuplizerTestExample()));
        $this->assertFalse($this->object->isInstance($this->object));
    }

    /**
     * Tests the 'setIdentifier' method
     */
    public function testSetIdentifier()
    {
        $object = new TuplizerTestExample();
        $this->assertNull($object->getId());
        $this->object->setIdentifier($object, 2);
        $this->assertEquals(2, $object->getId());
    }

    /**
     * Tests the 'setPropertyValue' method
     */
    public function testSetPropertyValue()
    {
        $object = new TuplizerTestExample();
        $this->object->setPropertyValue($object, 0, 'Bob');
        $this->object->setPropertyValue($object, 'age', 17);
        $this->assertEquals('Bob', $object->getName());
        $this->assertEquals(17, $object->getAge());
    }

    /**
     * Tests the 'setPropertyValues' method
     */
    public function testSetPropertyValues()
    {
        $comp = new TuplizerTestExampleComponent();
        $vals = array('Bob', 30, 'M', 2, $comp);
        $object = new TuplizerTestExample();
        $this->object->setPropertyValues($object, $vals);
        $this->assertEquals('Bob', $object->getName());
        $this->assertEquals(30, $object->getAge());
        $this->assertEquals('M', $object->getGender());
        $this->assertEquals(2, $object->getVersion());
        $this->assertSame($comp, $object->getComponent());
    }
}

// Call Xyster_Orm_Tuplizer_EntityTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Tuplizer_EntityTest::main') {
    Xyster_Orm_Tuplizer_EntityTest::main();
}
