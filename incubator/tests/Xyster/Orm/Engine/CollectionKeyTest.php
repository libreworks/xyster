<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Engine_CollectionKeyTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Engine_CollectionKeyTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Engine/CollectionKey.php';
require_once 'Xyster/Orm/Persister/Collection/Interface.php';
require_once 'Xyster/Orm/Type/Integer.php';

/**
 * Test class for Xyster_Orm_Engine_CollectionKey.
 * Generated by PHPUnit on 2008-10-06 at 20:37:03.
 */
class Xyster_Orm_Engine_CollectionKeyTest extends PHPUnit_Framework_TestCase
{
    protected $persister;
    
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Engine_CollectionKeyTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }
    
    protected function setUp()
    {
        $this->persister = $this->getMock('Xyster_Orm_Persister_Collection_Interface');
        $this->persister->expects($this->any())
            ->method('getRole')
            ->will($this->returnValue('foobar'));
        $this->persister->expects($this->any())
            ->method('getKeyType')
            ->will($this->returnValue(new Xyster_Orm_Type_Integer));
    }
    
    /**
     * Tests the constructor and basic operation
     */
    public function testConstruct()
    {
        $key = new Xyster_Orm_Engine_CollectionKey($this->persister, 123);
        $this->assertEquals(123, $key->getKey());
        $this->assertEquals('foobar', $key->getRole());
    }
    
    /**
     * Tests the 'equals' method
     */
    public function testEquals()
    {
        $key1 = new Xyster_Orm_Engine_CollectionKey($this->persister, 123);
        $key2 = new Xyster_Orm_Engine_CollectionKey($this->persister, 123);
        $key3 = new Xyster_Orm_Engine_CollectionKey($this->persister, 456);
        
        $this->assertTrue($key1->equals($key1));
        $this->assertTrue($key1->equals($key2));
        $this->assertFalse($key1->equals($key3));
    }

    /**
     * Tests the 'hashCode' method
     */
    public function testHashCode()
    {
        $hash = Xyster_Type::hash(array('foobar', 123));
        $key = new Xyster_Orm_Engine_CollectionKey($this->persister, 123);
        $this->assertEquals($hash, $key->hashCode());
    }
}

// Call Xyster_Orm_Engine_CollectionKeyTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Engine_CollectionKeyTest::main') {
    Xyster_Orm_Engine_CollectionKeyTest::main();
}
