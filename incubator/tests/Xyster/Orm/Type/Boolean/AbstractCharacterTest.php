<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
require_once dirname(dirname(dirname(dirname(dirname(__FILE__))))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Type/Boolean/Character.php';
require_once 'Xyster/Db/Statement/Stub.php';

/**
 * Test class for Xyster_Orm_Type_Boolean_Character.
 * Generated by PHPUnit on 2008-09-26 at 21:55:10.
 */
abstract class Xyster_Orm_Type_Boolean_AbstractCharacterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Xyster_Orm_Type_Boolean_Character
     */
    protected $object;
    
    /**
     * Tests the 'getDataType' method
     */
    public function testGetDataType()
    {
        $this->assertSame(Xyster_Db_DataType::Char(), $this->object->getDataType());
    }

    /**
     * Tests the 'get' method
     */
    public function testGet()
    {
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        $this->assertTrue($this->object->get(array($this->_getTrueString()), 0, $sess));
        $this->assertFalse($this->object->get(array($this->_getFalseString()), 0, $sess));
        $this->assertNull($this->object->get(array(null), 0, $sess));
    }
    
    /**
     * Tests the 'hasResolve' method
     */
    public function testHasResolve()
    {
        $this->assertTrue($this->object->hasResolve());
    }
    
    /**
     * Tests the 'set' method
     */
    public function testSet()
    {
        $stmt = new Xyster_Db_Statement_Stub;
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        
        $this->object->set($stmt, true, 0, $sess, array(true));
        $this->assertEquals($this->_getTrueString(), $stmt->values[0]);
        
        $this->object->set($stmt, false, 0, $sess, array(true));
        $this->assertEquals($this->_getFalseString(), $stmt->values[0]);
    }
    
    /**
     * Gets the true value
     * @return string
     */
    protected abstract function _getTrueString();
    
    /**
     * Gets the false value
     * @return string
     */
    protected abstract function _getFalseString();
}
