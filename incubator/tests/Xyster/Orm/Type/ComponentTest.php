<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Type_ComponentTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Type_ComponentTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Type/Component.php';
require_once 'Xyster/Db/Statement/Stub.php';
require_once 'Xyster/Orm/Mapping/Value.php';
require_once 'Xyster/Orm/Mapping/Component.php';
require_once 'Xyster/Orm/Runtime/ComponentMeta.php';
require_once 'Xyster/Orm/Type/String.php';
require_once 'Xyster/Orm/Type/Integer.php';
require_once 'Xyster/Orm/Type/Timestamp.php';
require_once 'Xyster/Orm/Tuplizer/Component.php';
require_once 'Xyster/Data/Field/Mapper/Method.php';

/**
 * Test class for Xyster_Orm_Type_Component.
 * Generated by PHPUnit on 2008-08-13 at 18:38:28.
 */
class Xyster_Orm_Type_ComponentTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Type_Component
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Type_ComponentTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $titleVal = new Xyster_Orm_Mapping_Value;
        $titleVal->setType(new Xyster_Orm_Type_String)->addColumn(new Xyster_Db_Column);
        $title = new Xyster_Orm_Mapping_Property;
        $title->setName('title')->setValue($titleVal)->setMapper(new Xyster_Data_Field_Mapper_Method('title'));
        
        $userVal = new Xyster_Orm_Mapping_Value;
        $userCol = new Xyster_Db_Column;
        $userCol->setNullable(false);
        $userVal->setType(new Xyster_Orm_Type_Integer)->addColumn($userCol);
        $userId = new Xyster_Orm_Mapping_Property;
        $userId->setName('userId')->setValue($userVal)->setMapper(new Xyster_Data_Field_Mapper_Method('userId'));
        
        $createdVal = new Xyster_Orm_Mapping_Value;
        $createdVal->setType(new Xyster_Orm_Type_Timestamp)->addColumn(new Xyster_Db_Column);
        $created = new Xyster_Orm_Mapping_Property;
        $created->setName('created')->setValue($createdVal)->setMapper(new Xyster_Data_Field_Mapper_Method('created'));
        
        $component = new Xyster_Orm_Mapping_Component;
        $component->setComponentType(new Xyster_Type('Xyster_Orm_Type_ComponentTest_Example'));
        $component->setTuplizerType(new Xyster_Type('Xyster_Orm_Tuplizer_Component'));
        $component->addProperty($title)->addProperty($userId)->addProperty($created);

        $meta = new Xyster_Orm_Runtime_ComponentMeta($component);
        
        $this->object = new Xyster_Orm_Type_Component($meta);
    }

    /**
     * @todo Implement testCachePack().
     */
    public function testCachePack()
    {
        var_dump($this->object);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCacheUnpack().
     */
    public function testCacheUnpack()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCompare().
     */
    public function testCompare()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDeepCopy().
     */
    public function testDeepCopy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'get' method
     */
    public function testGet()
    {
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        $values = array('Lorem ipsum', 123, '2008-8-19 20:00:00');
        $ex = $this->object->get($values, null, $sess);
        $this->assertType('Xyster_Orm_Type_ComponentTest_Example', $ex);
        $this->assertEquals($values[0], $ex->getTitle());
        $this->assertEquals($values[1], $ex->getUserId());
        $this->assertType('Zend_Date', $ex->getCreated());
        $this->assertEquals($values[2], $ex->getCreated()->toString('Y-M-d H:m:s'));
    }

    /**
     * Tests the 'getColumnSpan' method
     */
    public function testGetColumnSpan()
    {
        $this->assertEquals(3, $this->object->getColumnSpan());
    }

    /**
     * Tests the 'getDataTypes' method
     */
    public function testGetDataTypes()
    {
        $types = array(Xyster_Db_DataType::Varchar(),
            Xyster_Db_DataType::Integer(), Xyster_Db_DataType::Timestamp());
        $this->assertEquals($types, $this->object->getDataTypes());
    }

    /**
     * Tests the 'getFetchTypes' method
     */
    public function testGetFetchTypes()
    {
        $this->assertEquals(array(Zend_Db::PARAM_STR, Zend_Db::PARAM_INT, null), $this->object->getFetchTypes());
    }

    /**
     * Tests the 'getName' method
     */
    public function testGetName()
    {
        $this->assertEquals('component[title,userId,created]', $this->object->getName());
    }

    /**
     * Tests the 'getPropertyNames' method
     */
    public function testGetPropertyNames()
    {
        $names = array('title', 'userId', 'created');
        $this->assertEquals($names, $this->object->getPropertyNames());
    }

    /**
     * Tests the 'getPropertyNullability' method
     */
    public function testGetPropertyNullability()
    {
        $this->assertEquals(array(true, false, true), $this->object->getPropertyNullability());
    }

    /**
     * Tests the 'getPropertyValue' method
     */
    public function testGetPropertyValue()
    {
        $date = new Zend_Date;
        $ex = new Xyster_Orm_Type_ComponentTest_Example;
        $ex->setCreated($date);
        $this->assertEquals($date, $this->object->getPropertyValue($ex, 2));
    }

    /**
     * Tests the 'getPropertyValues' method
     */
    public function testGetPropertyValues()
    {
        $date = new Zend_Date;
        $ex = new Xyster_Orm_Type_ComponentTest_Example;
        $ex->setCreated($date);
        $ex->setTitle('Lorem ipsum');
        $ex->setUserId(123);
        $values = array('Lorem ipsum', 123, $date);
        $this->assertEquals($values, $this->object->getPropertyValues($ex));
    }

    /**
     * Tests the 'getReturnedType' method
     */
    public function testGetReturnedType()
    {
        $type = $this->object->getReturnedType();
        $this->assertType('Xyster_Type', $type);
        $this->assertEquals('Xyster_Orm_Type_ComponentTest_Example', $type->getName());
    }

    /**
     * Tests the 'getTypes' method
     */
    public function testGetTypes()
    {
        $types = array(new Xyster_Orm_Type_String(),
            new Xyster_Orm_Type_Integer(), new Xyster_Orm_Type_Timestamp());
        $this->assertEquals($types, $this->object->getTypes());
    }

    /**
     * Tests the 'hasResolve' method
     */
    public function testHasResolve()
    {
        $this->assertTrue($this->object->hasResolve());
    }

    /**
     * @todo Implement testInstantiate().
     */
    public function testInstantiate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'instantiateNoParent' method
     */
    public function testInstantiateNoParent()
    {
        $this->assertType('Xyster_Orm_Type_ComponentTest_Example', $this->object->instantiateNoParent());
    }

    /**
     * Tests the 'isComponentType' method
     */
    public function testIsComponentType()
    {
        $this->assertTrue($this->object->isComponentType());
    }

    /**
     * @todo Implement testIsDirty().
     */
    public function testIsDirty()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsEqual().
     */
    public function testIsEqual()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'isMutable' method
     */
    public function testIsMutable()
    {
        $this->assertTrue($this->object->isMutable());
    }

    /**
     * @todo Implement testIsSame().
     */
    public function testIsSame()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSet().
     */
    public function testSet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Tests the 'setPropertyValues' method
     */
    public function testSetPropertyValues()
    {
        $ex = new Xyster_Orm_Type_ComponentTest_Example;
        $date = new Zend_Date;
        $values = array('Lorem ipsum', 123, $date);
        
        $this->object->setPropertyValues($ex, $values);
        $this->assertEquals($values[0], $ex->getTitle());
        $this->assertEquals($values[1], $ex->getUserId());
        $this->assertEquals($values[2], $ex->getCreated());
    }

    /**
     * Tests the 'toColumnNullness' method
     */
    public function testToColumnNullness()
    {
        $ex = new Xyster_Orm_Type_ComponentTest_Example;
        $date = new Zend_Date;
        $ex->setCreated($date);
        $ex->setUserId(123);
        $this->assertEquals(array(false, true, true), $this->object->toColumnNullness($ex));
    }
}

class Xyster_Orm_Type_ComponentTest_Example
{
    protected $_title;
    protected $_userId;
    protected $_created;
    
    public function getTitle()
    {
        return $this->_title;
    }
    public function setTitle( $title )
    {
        $this->_title = $title;
    }
    public function setUserId( $userId )
    {
        $this->_userId = $userId;
    }
    public function getUserId()
    {
        return $this->_userId;
    }
    public function getCreated()
    {
        return $this->_created;
    }
    public function setCreated( Zend_Date $created )
    {
        $this->_created = $created;
    }
}

// Call Xyster_Orm_Type_ComponentTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Type_ComponentTest::main') {
    Xyster_Orm_Type_ComponentTest::main();
}
