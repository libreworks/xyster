<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Type_NullableTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Type_NullableTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Type/Nullable.php';
require_once 'Xyster/Db/DataType.php';

/**
 * Test class for Xyster_Orm_Type_Nullable.
 * Generated by PHPUnit on 2008-07-26 at 13:37:00.
 */
class Xyster_Orm_Type_NullableTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Type_Nullable
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Type_NullableTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Orm_Type_NullableImpl;
    }
    
    /**
     * Tests the 'getColumnSpan' method
     */
    public function testGetColumnSpan()
    {
        $this->assertEquals(1, $this->object->getColumnSpan());
    }

    /**
     * Tests the 'getDataTypes' method
     */
    public function testGetDataTypes()
    {
        $types = $this->object->getDataTypes();
        $this->assertType('array', $types);
        $this->assertType('Xyster_Db_DataType', $types[0]);
    }

    /**
     * Tests the 'getFetchType' method
     *
     */
    public function testGetFetchTypes()
    {
        $this->assertType('array', $this->object->getFetchTypes());
    }
    
    /**
     * Tests the 'getFetchType' method
     */
    public function testGetFetchType()
    {
        $this->assertNull($this->object->getFetchType());
    }
    
    /**
     * Tests the 'isDirty' method
     */
    public function testIsDirty()
    {
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        $this->assertTrue($this->object->isDirty(1, 2, $sess, array(true)));
        $this->assertFalse($this->object->isDirty(1, 1, $sess, array(true)));
        $this->assertFalse($this->object->isDirty(1, 2, $sess, array(false)));
    }

    /**
     * Tests the 'toColumnNullness' method
     */
    public function testToColumnNullness()
    {
        $this->assertEquals(array(false), $this->object->toColumnNullness(null));
        $this->assertEquals(array(true), $this->object->toColumnNullness(123));
    }
}

class Xyster_Orm_Type_NullableImpl extends Xyster_Orm_Type_Nullable
{
    function deepCopy($value)
    {
    }
    
    function getDataType()
    {
        return Xyster_Db_DataType::Varchar();
    }
    
    /**
     * Returns the type name
     *
     * @return string
     */
    function getName()
    {
    }
    
    /**
     * Gets the type returned by this class
     *
     * @return Xyster_Type
     */
    function getReturnedType()
    {
    }
    
    /**
     * Whether this type can be altered 
     *
     * @return boolean
     */
    function isMutable()
    {
    }
    
    /**
     * Sets the value to the prepared statement
     * 
     * A multi-column type will write parameters starting from the index.
     *
     * @param Zend_Db_Statement_Interface $stmt The statment to set
     * @param mixed $value The value to bind into the statement
     * @param int $index The starting index to bind
     * @param Xyster_Orm_Session_Interface $sess The ORM session
     * @param array $settable Boolean for each column's settability
     */
    function set(Zend_Db_Statement_Interface $stmt, $value, $index, Xyster_Orm_Session_Interface $sess, array $settable = array() )
    {
    }
}

// Call Xyster_Orm_Type_NullableTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Type_NullableTest::main') {
    Xyster_Orm_Type_NullableTest::main();
}
