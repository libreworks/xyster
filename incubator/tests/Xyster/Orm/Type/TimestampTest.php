<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Type_TimestampTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Type_TimestampTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Type/Timestamp.php';
require_once 'Xyster/Db/Statement/Stub.php';

/**
 * Test class for Xyster_Orm_Type_Timestamp.
 * Generated by PHPUnit on 2008-07-27 at 15:31:06.
 */
class Xyster_Orm_Type_TimestampTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Type_Timestamp
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Type_TimestampTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Orm_Type_Timestamp;
    }

    /**
     * Tests the 'get' method
     */
    public function testGet()
    {
        $stmt = new Xyster_Db_Statement_Stub;
        $stmt->columnValues['foo'] = '2008-07-27T11:59:45+05:00';
        $date = new Zend_Date('2008-07-27T11:59:45+05:00');
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        $this->assertEquals($date, $this->object->get($stmt, array('foo'), 0, $sess));
    }

    /**
     * Tests the 'getDataType' method
     */
    public function testGetDataType()
    {
        $this->assertSame(Xyster_Db_DataType::Timestamp(), $this->object->getDataType());
    }

    /**
     * Tests the 'getName' method
     */
    public function testGetName()
    {
        $this->assertEquals('timestamp', $this->object->getName());
    }

    /**
     * Tests the 'getReturnedType' method
     */
    public function testGetReturnedType()
    {
        $type = $this->object->getReturnedType();
        $this->assertType('Xyster_Type', $type);
        $this->assertEquals('Zend_Date', $type->getName());
        $this->assertSame($type, $this->object->getReturnedType());
    }

    /**
     * Tests the 'isEqual' method
     *
     */
    public function testIsEqual()
    {
        $a = date('Y-m-d H:i:s');
        $b = new Zend_Date($a);
        $this->assertTrue($this->object->isEqual($a, $b));
        $this->assertFalse($this->object->isEqual($a, '-2 days'));
    }
    
    /**
     * Tests the 'set' method
     */
    public function testSet()
    {
        $stmt = new Xyster_Db_Statement_Stub;
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        $date = new Zend_Date('2008-07-27T11:59:45+05:00');
        $this->object->set($stmt, $date, 0, $sess, array(true));
        $this->assertEquals($date->get(Zend_Date::ISO_8601), $stmt->values[0]);
    }
}

// Call Xyster_Orm_Type_TimestampTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Type_TimestampTest::main') {
    Xyster_Orm_Type_TimestampTest::main();
}
