<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Type_AbstractTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Type_AbstractTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Type/Abstract.php';

/**
 * Test class for Xyster_Orm_Type_Abstract.
 * Generated by PHPUnit on 2008-07-26 at 13:20:00.
 */
class Xyster_Orm_Type_AbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Type_Abstract
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Type_AbstractTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Orm_Type_AbstractImpl;
    }

    /**
     * Tests the 'isCollection' method
     */
    public function testIsCollection()
    {
        $this->assertFalse($this->object->isCollection());
    }

    /**
     * Tests the 'isComponentType' method
     */
    public function testIsComponentType()
    {
        $this->assertFalse($this->object->isComponentType());
    }

    /**
     * Tests the 'isDirty' method
     */
    public function testIsDirty()
    {
        $sess = $this->getMock('Xyster_Orm_Session_Interface');
        $this->assertTrue($this->object->isDirty(1, 2, $sess));
        $this->assertFalse($this->object->isDirty(1, 1, $sess));
    }

    /**
     * Tests the 'isEntityType' method
     */
    public function testIsEntityType()
    {
        $this->assertFalse($this->object->isEntityType());
    }

    /**
     * Tests the 'isEqual' method
     */
    public function testIsEqual()
    {
        $this->assertTrue($this->object->isEqual(1, 1));
        $this->assertFalse($this->object->isEqual(1, 2));
    }

    /**
     * Tests the 'isSame' method
     */
    public function testIsSame()
    {
        $this->assertTrue($this->object->isEqual(1, 1));
        $this->assertFalse($this->object->isEqual(1, 2));
    }
}

class Xyster_Orm_Type_AbstractImpl extends Xyster_Orm_Type_Abstract
{
    /**
     * Gets the type out of a result set statement
     *
     * @param Zend_Db_Statement_Interface $rs The statement used to fetch
     * @param object $owner The owning entity
     * @param Xyster_Orm_Session_Interface $sess The ORM session
     * @param array $names The column names
     */
    function get(Zend_Db_Statement_Interface $rs, $owner, Xyster_Orm_Session_Interface $sess, array $names = array() )
    {
    }
    
    /**
     * Gets how many columns are used to persist this type
     *
     * @return int
     */
    function getColumnSpan()
    {
    }

    /**
     * Gets an array of Xyster_Db_DataType objects for the columns in this type 
     *
     * @return array of {@link Xyster_Db_DataType} objects
     */
    function getDataTypes()
    {
    }
    
    /**
     * Returns the type name
     *
     * @return string
     */
    function getName()
    {
    }
    
    /**
     * Gets the type returned by this class
     *
     * @return Xyster_Type
     */
    function getReturnedType()
    {
    }
        
    /**
     * Whether this type can be altered 
     *
     * @return boolean
     */
    function isMutable()
    {
    }
    
    /**
     * Sets the value to the prepared statement
     * 
     * A multi-column type will write parameters starting from the index.
     *
     * @param Zend_Db_Statement_Interface $stmt The statment to set
     * @param mixed $value The value to bind into the statement
     * @param int $index The starting index to bind
     * @param Xyster_Orm_Session_Interface $sess The ORM session
     * @param array $settable Boolean for each column's settability
     */
    function set(Zend_Db_Statement_Interface $stmt, $value, $index, Xyster_Orm_Session_Interface $sess, array $settable = array() )
    {
    }
    
    /**
     * Given an instance, return which columns would be null
     *
     * @param mixed $value
     * @return array
     */
    function toColumnNullness( $value )
    {
    }
}

// Call Xyster_Orm_Type_AbstractTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Type_AbstractTest::main') {
    Xyster_Orm_Type_AbstractTest::main();
}