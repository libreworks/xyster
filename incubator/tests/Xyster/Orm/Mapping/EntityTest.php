<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Mapping_EntityTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Mapping_EntityTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Mapping/Entity.php';

/**
 * Test class for Xyster_Orm_Mapping_Entity.
 * Generated by PHPUnit on 2008-08-01 at 20:33:43.
 */
class Xyster_Orm_Mapping_EntityTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Orm_Mapping_Entity
     */
    protected $object;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Mapping_EntityTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Orm_Mapping_Entity;
    }

    /**
     * Tests the 'addProperty' and 'getProperties' method
     */
    public function testAddProperty()
    {
        $property = new Xyster_Orm_Mapping_Property;
        $return = $this->object->addProperty($property);
        $this->assertSame($this->object, $return);
        $props = $this->object->getProperties();
        $this->assertTrue(in_array($property, $props, true));
    }

    /**
     * Tests the 'getClassName' and 'setClassName' methods
     */
    public function testGetAndSetClassName()
    {
        $return = $this->object->setClassName('foobar');
        $this->assertSame($this->object, $return);
        $this->assertEquals('foobar', $this->object->getClassName());
    }

    /**
     * Tests the 'getIdentifier', 'hasIdentifier', and 'setIdentifier' methods
     */
    public function testGetHasAndSetIdentifier()
    {
        $prop = new Xyster_Orm_Mapping_Property;
        $this->assertFalse($this->object->hasIdentifier());
        $return = $this->object->setIdentifier($prop);
        $this->assertSame($this->object, $return);
        $this->assertSame($prop, $this->object->getIdentifier());
        $this->assertTrue($this->object->hasIdentifier());
    }

    /**
     * Tests the 'getLoaderType' and 'setLoaderType' methods
     */
    public function testGetLoaderType()
    {
        $type = new Xyster_Type('ArrayObject');
        $return = $this->object->setLoaderType($type);
        $this->assertSame($this->object, $return);
        $this->assertSame($type, $this->object->getLoaderType());
    }

    /**
     * Tests the 'getMappedType' method
     */
    public function testGetMappedType()
    {
        $return = $this->object->setClassName('ArrayObject');
        $this->assertSame($this->object, $return);
        $type = $this->object->getMappedType();
        $this->assertType('Xyster_Type', $type);
        $this->assertEquals('ArrayObject', $type->getName());
    }

    /**
     * Tests the 'getPersisterType' and 'setPersisterType' methods
     */
    public function testGetAndSetPersisterType()
    {
        $type = new Xyster_Type('ArrayObject');
        $return = $this->object->setPersisterType($type);
        $this->assertSame($this->object, $return);
        $this->assertSame($type, $this->object->getPersisterType());
    }

    /**
     * Tests the 'getProperty' method
     */
    public function testGetProperty()
    {
        $property = new Xyster_Orm_Mapping_Property;
        $property->setName('foobar');
        $this->object->addProperty($property);
        $return = $this->object->getProperty('foobar');
        $this->assertSame($property, $return);
        $this->setExpectedException('Xyster_Orm_Mapping_Exception');
        $this->object->getProperty('not-there');
    }

    /**
     * Tests the 'getTable' and 'setTable' methods
     */
    public function testGetAndSetTable()
    {
        $table = new Xyster_Db_Table('foobartable');
        $return = $this->object->setTable($table);
        $this->assertSame($this->object, $return);
        $this->assertSame($table, $this->object->getTable());
    }

    /**
     * Tests the 'getTuplizerType' and 'setTuplizerType' methods
     *
     */
    public function testGetAndSetTuplizerType()
    {
        $type = new Xyster_Type('ArrayObject');
        $return = $this->object->setTuplizerType($type);
        $this->assertSame($this->object, $return);
        $this->assertSame($type, $this->object->getTuplizerType());
    }
    
    /**
     * Tests the 'getVersion', 'isVersioned', and 'setVersion' methods
     */
    public function testGetIsAndSetVersion()
    {
        $prop = new Xyster_Orm_Mapping_Property;
        $this->assertFalse($this->object->isVersioned());
        $return = $this->object->setVersion($prop);
        $this->assertSame($this->object, $return);
        $this->assertSame($prop, $this->object->getVersion());
        $this->assertTrue($this->object->isVersioned());
    }

    /**
     * Tests the 'isLazy' and 'setLazy' methods
     */
    public function testIsAndSetLazy()
    {
        $this->assertFalse($this->object->isLazy());
        $return = $this->object->setLazy();
        $this->assertSame($this->object, $return);
        $this->assertTrue($this->object->isLazy());
        $this->object->setLazy(false);
        $this->assertFalse($this->object->isLazy());
    }

    /**
     * Tests the 'isMutable' and 'setMutable' methods
     */
    public function testIsAndSetMutable()
    {
        $this->assertTrue($this->object->isMutable());
        $return = $this->object->setMutable(false);
        $this->assertSame($this->object, $return);
        $this->assertFalse($this->object->isMutable());
        $this->object->setMutable();
        $this->assertTrue($this->object->isMutable());
    }
}

// Call Xyster_Orm_Mapping_EntityTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Mapping_EntityTest::main') {
    Xyster_Orm_Mapping_EntityTest::main();
}
