<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Orm
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Orm_Runtime_ComponentMetaTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Orm_Runtime_ComponentMetaTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Orm/Runtime/ComponentMeta.php';
require_once 'Xyster/Orm/Mapping/Component.php';
require_once 'Xyster/Orm/Type/String.php';

/**
 * Test class for Xyster_Orm_Runtime_ComponentMeta.
 * Generated by PHPUnit on 2008-08-13 at 20:07:25.
 */
class Xyster_Orm_Runtime_ComponentMetaTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Orm_Runtime_ComponentMetaTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Tests the 'getProperties' method
     */
    public function testGetProperties()
    {
        $val = new Xyster_Orm_Mapping_Value;
        $val->setType(new Xyster_Orm_Type_String);
        $prop1 = new Xyster_Orm_Mapping_Property;
        $prop1->setName('prop1')->setValue($val);
        $prop2 = new Xyster_Orm_Mapping_Property;
        $prop2->setName('prop2')->setValue($val);
        $value = new Xyster_Orm_Mapping_Component;
        $value->addProperty($prop1)->addProperty($prop2);
        $object = new Xyster_Orm_Runtime_ComponentMeta($value);
        
        $this->assertEquals(2, $object->getPropertySpan());
        $props = $object->getProperties();
        $this->assertType('array', $props);
        foreach( $props as $prop ) {
            $this->assertType('Xyster_Orm_Runtime_Property_Standard', $prop);
        }
    }

    /**
     * Tests the 'getProperty' method
     */
    public function testGetProperty()
    {
        $val = new Xyster_Orm_Mapping_Value;
        $val->setType(new Xyster_Orm_Type_String);
        $prop1 = new Xyster_Orm_Mapping_Property;
        $prop1->setName('prop1')->setValue($val);
        $value = new Xyster_Orm_Mapping_Component;
        $value->addProperty($prop1);
        $object = new Xyster_Orm_Runtime_ComponentMeta($value);
        
        $this->assertType('Xyster_Orm_Runtime_Property_Standard', $object->getProperty(0));
        $this->setExpectedException('Xyster_Orm_Exception', 'Invalid index');
        $object->getProperty(-1);
    }

    /**
     * Tests the 'getPropertyByName'
     */
    public function testGetPropertyByName()
    {
        $val = new Xyster_Orm_Mapping_Value;
        $val->setType(new Xyster_Orm_Type_String);
        $prop1 = new Xyster_Orm_Mapping_Property;
        $prop1->setName('prop1')->setValue($val);
        $prop2 = new Xyster_Orm_Mapping_Property;
        $prop2->setName('prop2')->setValue($val);
        $value = new Xyster_Orm_Mapping_Component;
        $value->addProperty($prop1)->addProperty($prop2);
        $object = new Xyster_Orm_Runtime_ComponentMeta($value);
        
        $this->assertEquals(1, $object->getPropertyIndex('prop2'));
        $this->assertType('Xyster_Orm_Runtime_Property_Standard', $object->getPropertyByName('prop2'));
        $this->setExpectedException('Xyster_Orm_Exception', 'Property not found: foobar');
        $object->getPropertyByName('foobar');
    }

    /**
     * Tests the 'getTuplizer' method
     */
    public function testGetTuplizer()
    {
        require_once 'Xyster/Orm/Tuplizer/Component.php';
        $value = new Xyster_Orm_Mapping_Component;
        $value->setTuplizerType(new Xyster_Type('Xyster_Orm_Tuplizer_Component'));
        $object = new Xyster_Orm_Runtime_ComponentMeta($value);
        
        $this->assertType('Xyster_Orm_Tuplizer_Component', $object->getTuplizer());
    }

    /**
     * Tests the 'isKey' method
     */
    public function testIsKey()
    {
        $value = new Xyster_Orm_Mapping_Component;
        $value->setKey(true);
        $object = new Xyster_Orm_Runtime_ComponentMeta($value);
        $this->assertEquals(true, $object->isKey());
        
        $value = new Xyster_Orm_Mapping_Component;
        $value->setKey(false);
        $object = new Xyster_Orm_Runtime_ComponentMeta($value);
        $this->assertEquals(false, $object->isKey());
    }
}

// Call Xyster_Orm_Runtime_ComponentMetaTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Orm_Runtime_ComponentMetaTest::main') {
    Xyster_Orm_Runtime_ComponentMetaTest::main();
}
