<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Db
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
// Call Xyster_Db_Schema_AbstractTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Db_Schema_AbstractTest::main');
}
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Xyster/Db/Schema/Abstract.php';
require_once 'Xyster/Db/Schema/Stub.php';
require_once 'Xyster/Db/Column.php';
require_once 'Xyster/Db/Adapter/Stub.php';

/**
 * Test class for Xyster_Db_Schema_Abstract.
 * Generated by PHPUnit on 2008-03-12 at 19:41:18.
 */
class Xyster_Db_Schema_AbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Db_Schema_Abstract
     */
    protected $object;
    
    /**
     * @var Xyster_Db_Adapter_Stub
     */
    protected $db;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';
        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Db_Schema_AbstractTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     *
     */
    protected function setUp()
    {
    	$this->db = new Xyster_Db_Adapter_Stub(array('dbname'=>'stub'));
        $this->object = new Xyster_Db_Schema_Stub;
    }
    
    /**
     * Tests the getting and setting of an adapter
     *
     */
    public function testGetAndSetAdapter()
    {
    	$this->assertNull($this->object->getAdapter());
    	$return = $this->object->setAdapter($this->db);
    	$this->assertSame($this->db, $this->object->getAdapter());
    	$this->assertSame($this->object, $return);
    }
    
    /**
     * Tests if passing the adapter to the constructor will work
     *
     */
    public function testConstructor()
    {
    	$gateway = new Xyster_Db_Schema_Stub($this->db);
    	$this->assertSame($this->db, $gateway->getAdapter());
    }
    
    /**
     * Tests the 'toDataType' method
     */
    public function testToDataType()
    {
        $blobTypes = array('BINARY', 'BYTEA', 'IMAGE', 'VARBINARY', 'BLOB',
            'GRAPHIC', 'VARGRAPHIC', 'DBCLOB', 'BIT VARYING', 'VARBIT', 'RAW',
            'LONG RAW', 'BINARY LARGE OBJECT', 'LONG VARGRAPHIC');
        $clobTypes = array('TEXT', 'NTEXT', 'LONG', 'LONGVARCHAR',
            'LONG VARCHAR', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',
            'CLOB', 'NATIONAL CHARACTER LARGE OBJECT', 'NCHAR LARGE OBJECT',
            'NCLOB');
        $booleanTypes = array('BOOLEAN', 'BOOL');
        $charTypes = array('NATIONAL CHARACTER', 'CHAR2', 'NCHAR2', 'NCHAR',
            'NCHARACTER');
        $varcharTypes = array('NATIONAL CHARACTER VARYING', 'NVARCHAR2',
            'NVARCHAR', 'VARCHAR', 'CHARACTER VARYING', 'VARCHAR2');
        $smallIntTypes = array('SMALLINT', 'INT2', 'TINYINT');
        $intTypes = array('INT', 'INTEGER', 'INT4');
        $bigintTypes = array('BIGINT', 'INT8');
        $decimalTypes = array('DEC', 'DECIMAL', 'NUMERIC', 'NUMBER',
            'MONEY', 'SMALLMONEY');
        $realTypes = array('REAL', 'FLOAT4', 'BINARY_FLOAT');
        $floatTypes = array('BINARY_DOUBLE', 'FLOAT', 'FLOAT8', 'DOUBLE',
            'DOUBLE PRECISION');
        
        $this->_testToDataType(Xyster_Db_DataType::Blob(), $blobTypes);
        $this->_testToDataType(Xyster_Db_DataType::Clob(), $clobTypes);
        $this->_testToDataType(Xyster_Db_DataType::Boolean(), $booleanTypes);
        $this->_testToDataType(Xyster_Db_DataType::Char(), $charTypes);
        $this->_testToDataType(Xyster_Db_DataType::Varchar(), $varcharTypes);
        $this->_testToDataType(Xyster_Db_DataType::Smallint(), $smallIntTypes);
        $this->_testToDataType(Xyster_Db_DataType::Integer(), $intTypes);
        $this->_testToDataType(Xyster_Db_DataType::Bigint(), $bigintTypes);
        $this->_testToDataType(Xyster_Db_DataType::Decimal(), $decimalTypes);
        $this->_testToDataType(Xyster_Db_DataType::Real(), $realTypes);
        $this->_testToDataType(Xyster_Db_DataType::Float(), $floatTypes);
        $this->_testToDataType(Xyster_Db_DataType::Time(), array('TIME'));
        $this->_testToDataType(Xyster_Db_DataType::Date(), array('DATE'));
        $this->_testToDataType(Xyster_Db_DataType::Timestamp(), array('TIMESTAMP'));
        $this->_testToDataType(Xyster_Db_DataType::Identity(), array('SERIAL'));
        
        $this->setExpectedException('Xyster_Db_Schema_Exception', 'No data type could be determined for FOOBAR');
        $this->object->toDataType('foobar');
    }
    
    /**
     * Tests the 'toSqlType' method
     */
    public function testToSqlType()
    {
        $col = new Xyster_Db_Column('foobar');
        $col->setLength('50')->setPrecision(10)->setScale(2);
        
        $expected = array(
            'VARCHAR(50)' => Xyster_Db_DataType::Varchar(),
            'CHAR(50)' => Xyster_Db_DataType::Char(),
            'DECIMAL(10,2)' => Xyster_Db_DataType::Decimal(),
            'INTEGER' => Xyster_Db_DataType::Integer(),
            'SMALLINT' => Xyster_Db_DataType::Smallint(),
            'FLOAT' => Xyster_Db_DataType::Float(),
            'TIMESTAMP' => Xyster_Db_DataType::Timestamp(),
            'DATE' => Xyster_Db_DataType::Date(),
            'TIME' => Xyster_Db_DataType::Time(),
            'CLOB' => Xyster_Db_DataType::Clob(),
            'BLOB' => Xyster_Db_DataType::Blob(),
            'BOOLEAN' => Xyster_Db_DataType::Boolean(),
            'BIGINT' => Xyster_Db_DataType::Bigint(),
            'REAL' => Xyster_Db_DataType::Real()
        );
        
        foreach( $expected as $exp => $type ) {
            $col->setType($type);
            $result = $this->object->toSqlType($col);
            $this->assertEquals($exp, $result);
        }
    }
    
    /**
     * Performs tests for each different kind of data type group
     *
     * @param Xyster_Db_DataType $type
     * @param array $types
     */
    protected function _testToDataType( Xyster_Db_DataType $type, array $types )
    {
        foreach( $types as $typeName ) {
            $typeName = strtolower($typeName);
            $this->assertSame($type, $this->object->toDataType($typeName));
        }
    }
}

// Call Xyster_Db_Schema_AbstractTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Db_Schema_AbstractTest::main') {
    Xyster_Db_Schema_AbstractTest::main();
}
