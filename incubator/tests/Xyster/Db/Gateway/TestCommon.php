<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Db
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";
require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'Zend/Db.php';

/**
 * Test class for Xyster_Db_Gateway_TableBuilder.
 * Generated by PHPUnit on 2008-03-17 at 19:04:52.
 */
abstract class Xyster_Db_Gateway_TestCommon extends PHPUnit_Framework_TestCase
{
    /**
     * @var Zend_Db_Adapter_Abstract
     */
    protected $_db;
    
    /**
     * @var Xyster_Db_Gateway_Abstract
     */
    protected $object;
    
    /**
     * Sets up the test
     *
     */
    protected function setUp()
    {
        $this->_db = Zend_Db::factory($this->getDriver(), $this->getConfig());
        $className = 'Xyster_Db_Gateway_' . $this->getDriver(); 
        try {
            $conn = $this->_db->getConnection();
            $this->object = new $className($this->_db);
        } catch (Zend_Exception $e) {
            $this->_db = null;
            $this->assertType('Zend_Db_Adapter_Exception', $e,
                'Expecting Zend_Db_Adapter_Exception, got ' . get_class($e));
            $this->markTestSkipped($e->getMessage());
        }
    }
    
    /**
     * Cleans up any tables created
     *
     */
    protected function tearDown()
    {
        $tables = $this->_db->listTables();
        $drop = array('forum', 'message_board');
        foreach( $tables as $name ) {
            if ( in_array($name, $drop) ) {
                $this->_db->query('DROP TABLE ' . $name);
            }
        }
    }
    
    /**
     * Gets the configuration for the database adapter
     * 
     * @return array
     */
    abstract public function getConfig();
        
    /**
     * Gets the type of adapter
     *
     * @return string
     */
    abstract public function getDriver();
    
    /**
     * Tests the 'addColumn' method
     */
    public function testAddColumn()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertArrayNotHasKey('category_id', $describe);
        $this->object->addColumn('forum', 'category_id',
            Xyster_Db_Gateway_DataType::Integer());
        
        $describe2 = $this->_db->describeTable('forum');
        $this->assertArrayHasKey('category_id', $describe2);
        $this->assertEquals('category_id', $describe2['category_id']['COLUMN_NAME']);
        $this->assertEquals('int', substr($describe2['category_id']['DATA_TYPE'], 0, 3));
    }
    
    /**
     * Enter description here...
     *
     * @todo implement testAddForeignKey
     */
    public function testAddForeignKey()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Adds an index to a table
     * 
     * @todo implement testAddIndex
     */
    public function testAddIndex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Adds a primary key to a table
     */
    public function testAddPrimaryOneColumn()
    {
        $builder = $this->object->createTable('forum');
        $builder->addInteger('forum_id')->null(false)
            ->addVarchar('username', 50)
            ->addVarchar('title', 255)
            ->addClob('message')
            ->addTimestamp('created_on')
            ->execute();
        $describe = $this->_db->describeTable('forum');
        $this->assertFalse($describe['forum_id']['PRIMARY']);
        $this->object->addPrimary('forum', 'forum_id');
        $describe2 = $this->_db->describeTable('forum');
        $this->assertTrue($describe2['forum_id']['PRIMARY']);
    }
    
    /**
     * Adds a primary key to a table
     */
    public function testAddPrimaryMultiColumn()
    {
        $builder = $this->object->createTable('forum');
        $builder->addInteger('forum_id')->null(false)
            ->addVarchar('username', 50)->null(false)
            ->addVarchar('title', 255)
            ->addClob('message')
            ->addTimestamp('created_on')
            ->execute();
        $describe = $this->_db->describeTable('forum');
        $this->assertFalse($describe['forum_id']['PRIMARY']);
        $this->assertFalse($describe['username']['PRIMARY']);
        $this->object->addPrimary('forum', array('forum_id', 'username'));
        $describe2 = $this->_db->describeTable('forum');
        $this->assertTrue($describe2['forum_id']['PRIMARY']);
        $this->assertTrue($describe2['username']['PRIMARY']);
        $this->assertEquals(1, $describe2['forum_id']['PRIMARY_POSITION']);
        $this->assertEquals(2, $describe2['username']['PRIMARY_POSITION']);
    }
    
    /**
     * Creates an index
     * 
     * @todo implement testCreateIndex
     */
    public function testCreateIndex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Creates a sequence
     * 
     * @todo implement testCreateSequence
     */
    public function testCreateSequence()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Creates a table builder
     */
    public function testCreateTable()
    {
        $builder = $this->object->createTable('mytable');
        $this->assertType('Xyster_Db_Gateway_TableBuilder', $builder);
        $this->assertEquals('mytable', $builder->getName());
    }
    
    /**
     * Creates a table from a table builder
     * 
     * @todo implement testCreateTableExecute
     */
    public function testCreateTableExecute()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Removes a column from a table
     */
    public function testDropColumn()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertArrayHasKey('username', $describe);
        
        $this->object->dropColumn('forum', 'username');
        
        $describe2 = $this->_db->describeTable('forum');
        $this->assertNotEquals($describe, $describe2);
        $this->assertArrayNotHasKey('username', $describe2);
    }
    
    /**
     * Drops a foreign key from a table
     * 
     * @todo implement testDropForeign
     */
    public function testDropForeign()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Removes an index
     * 
     * @todo implement testDropIndex
     */
    public function testDropIndex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Removes a primary key from a table
     */
    public function testDropPrimary()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertTrue($describe['forum_id']['PRIMARY']);
        $this->assertEquals(1, $describe['forum_id']['PRIMARY_POSITION']);
        $this->object->dropPrimary('forum');
        $describe2 = $this->_db->describeTable('forum');
        $this->assertFalse($describe2['forum_id']['PRIMARY']);
        $this->assertEquals(null, $describe2['forum_id']['PRIMARY_POSITION']);
    }
    
    /**
     * Drops a sequence
     * 
     * @todo implement testDropSequence
     */
    public function testDropSequence()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Tests the 'dropTable' method
     */
    public function testDropTable()
    {
        $this->_setupTestTable();
        $tables = $this->_db->listTables();
        $this->assertContains('forum', $tables);
        $this->object->dropTable('forum');
        $tables2 = $this->_db->listTables();
        $this->assertNotContains('forum', $tables2);
    }
    
    /**
     * Lists all indexes
     * 
     * @todo implement testListIndexes
     */
    public function testListIndexes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Lists all sequences
     * 
     * @todo implement testListSequences
     */
    public function testListSequences()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Renames a column
     */
    public function testRenameColumn()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertArrayHasKey('title', $describe);
        $this->object->renameColumn('forum', 'title', 'subject');
        $describe2 = $this->_db->describeTable('forum');
        $this->assertArrayHasKey('subject', $describe2);
        $this->assertArrayNotHasKey('title', $describe2);
        foreach( $describe2['subject'] as $key => $value ) {
            if ( $key != 'COLUMN_NAME' ) {
                $this->assertEquals($describe['title'][$key], $value, $key . ' is not the same as the original');
            }
        }
    }
    
    /**
     * Renames an index
     * 
     * @todo implement testRenameIndex
     */
    public function testRenameIndex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Renames a sequence
     * 
     * @todo implement testRenameSequence
     */
    public function testRenameSequence()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Renames a table
     */
    public function testRenameTable()
    {
        $this->_setupTestTable();
        $tables = $this->_db->listTables();
        $this->assertContains('forum', $tables);
        $this->object->renameTable('forum', 'message_board');
        $tables2 = $this->_db->listTables();
        $this->assertContains('message_board', $tables2);
        $this->assertNotContains('forum', $tables2);
    }
    
    /**
     * Sets the default value for a column
     */
    public function testSetDefault()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertEquals('', $describe['title']['DEFAULT']);
        $this->object->setDefault('forum', 'title', 'Default title of post');
        $describe2 = $this->_db->describeTable('forum');
        $this->assertEquals('Default title of post', $describe2['title']['DEFAULT']);
        foreach( $describe2['title'] as $key => $value ) {
            if ( $key != 'DEFAULT' ) {
                $this->assertEquals($describe['title'][$key], $value, $key . ' is not the same as the original');
            }
        }
    }
    
    /**
     * Sets whether or not the column will accept null
     */
    public function testSetNull()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertFalse($describe['title']['NULLABLE']);
        $this->object->setNull('forum', 'title', true);
        $describe2 = $this->_db->describeTable('forum');
        $this->assertTrue($describe2['title']['NULLABLE']);
        foreach( $describe2['title'] as $key => $value ) {
            if ( $key != 'NULLABLE' ) {
                $this->assertEquals($describe['title'][$key], $value, $key . ' is not the same as the original');
            }
        }
    }
    
    /**
     * Creates a unique index on a column or columns
     * 
     * @todo implement testSetUnique
     */
    public function testSetUnique()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    /**
     * Changes the type of a column
     */
    public function testSetType()
    {
        $this->_setupTestTable();
        $describe = $this->_db->describeTable('forum');
        $this->assertNotEquals('varchar', $describe['message']['DATA_TYPE']);
        $this->object->setType('forum', 'title', Xyster_Db_Gateway_DataType::Varchar(), 255);
        $describe2 = $this->_db->describeTable('forum');
        $this->assertEquals('varchar', $describe2['title']['DATA_TYPE']);
        $this->assertEquals(255, $describe2['title']['LENGTH']);
        foreach( $describe2['title'] as $key => $value ) {
            if ( $key != 'DATA_TYPE' && $key != 'LENGTH' ) {
                $this->assertEquals($describe['title'][$key], $value, $key . ' is not the same as the original');
            }
        }
    }
    
    /**
     * Sets up a single test table
     *
     */
    protected function _setupTestTable()
    {
        $builder = $this->object->createTable('forum');
        $builder->addInteger('forum_id')->primary()->null(false)
            ->addVarchar('username', 50)
            ->addVarchar('title', 255)->null(false)
            ->addClob('message')
            ->addTimestamp('created_on')
            ->execute();
    }
}