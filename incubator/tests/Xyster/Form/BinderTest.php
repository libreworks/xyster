<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Form
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Form_BinderTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Form_BinderTest::main');
}

require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Form/Binder.php';
require_once 'Zend/Form.php';

/**
 * Test class for Xyster_Form_Binder.
 * Generated by PHPUnit on 2008-05-19 at 14:05:37.
 */
class Xyster_Form_BinderTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Form_Binder
     */
    protected $object;
    
    /**
     * @var Zend_Form
     */
    protected $form;

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Form_BinderTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->form = new Zend_Form;
        $this->form->addElement('Text', 'foo')
            ->addElement('Text', 'bar')
            ->addElement('Text', 'bugDescription');
        $this->object = new Xyster_Form_Binder($this->form);
    }

    /**
     * Tests the main operation of the class
     *
     */
    public function testMain()
    {
        $values = array('foo' => 'Banana', 'bar' => 'Pomegranite');
        $this->assertNotEquals($values['foo'], $this->form->getElement('foo')->getValue());
        $this->assertNotEquals($values['bar'], $this->form->getElement('bar')->getValue());
        $this->object->bind($values);
        $this->assertEquals($values['foo'], $this->form->getElement('foo')->getValue());
        $this->assertEquals($values['bar'], $this->form->getElement('bar')->getValue());
    }
    
    /**
     * Tests the 'bindEntity' method
     */
    public function testBindEntity()
    {
        require_once 'Xyster/Orm/Mapper/FactoryMock.php';
        $factory = new Xyster_Orm_Mapper_FactoryMock();
        require_once 'Xyster/Orm/Loader.php';
        Xyster_Orm_Loader::addPath(dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/tests/Xyster/Orm/_files');
        require_once 'Xyster/Orm/Manager.php';
        $manager = new Xyster_Orm_Manager();
        $manager->setMapperFactory($factory);
        $map = $factory->get('MockBug');
        $map->getSet();
            
        $entity = new MockBug(array('bugId'          => 10,
            'bugDescription' => 'Gravity still works',
            'bugStatus'      => 'NEW',
            'createdOn'      => '2007-07-29',
            'updatedOn'      => '2007-07-29',
            'reportedBy'     => 'doublecompile',
            'assignedTo'     => 'rspeed',
            'verifiedBy'     => 'keefer'));
        
        $this->assertNotEquals($entity->bugDescription, $this->form->getElement('bugDescription')->getValue());
        $this->object->bindEntity($entity);
        $this->assertEquals($entity->bugDescription, $this->form->getElement('bugDescription')->getValue());
    }
}

// Call Xyster_Form_BinderTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Form_BinderTest::main') {
    Xyster_Form_BinderTest::main();
}
