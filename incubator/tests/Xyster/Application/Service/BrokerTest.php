<?php
/**
 * Xyster Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to xyster@devweblog.org so we can send you a copy immediately.
 *
 * @category  Xyster
 * @package   Xyster_Application
 * @subpackage   UnitTests
 * @copyright Copyright (c) 2007 Irrational Logic (http://devweblog.org)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Application_Service_BrokerTest::main');
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';

require_once dirname(dirname(__FILE__)) . '/_files/ExampleService.php';
require_once 'Xyster/Application.php';

/**
 * Test class for Xyster_Controller_Plugin_Acl.
 * Generated by PHPUnit on 2007-09-11 at 19:39:03.
 */
class Xyster_Application_Service_BrokerTest extends PHPUnit_Framework_TestCase
{
    /**
     * Broker
     * @var Xyster_Application_Service_Broker
     */
    public $broker;
    
    /**
     * Service
     * @var ExampleService
     */
    public $service;
    
    /**
     * Runs the test methods of this class.
     * 
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Application_Service_BrokerTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     */
    protected function setUp()
    {
        $this->broker = Xyster_Application::getInstance()->getServiceBroker();
        $this->service = new ExampleService();
        $this->service->setApplication(Xyster_Application::getInstance());
    }
    
    /**
     * Tears down the fixture
     *
     */
    protected function tearDown()
    {
        $this->broker->resetServices();
    }
    
    /**
     * Tests the 'addPrefix' and 'addPath' methods
     *
     */
    public function testAddPrefix()
    {
        $this->assertAttributeEquals(array(), '_paths', $this->broker);
        
        $prefix = 'Xyster_Application_Service_';
        $return = $this->broker->addPrefix($prefix);
        
        $pathEntry = array('dir'=>'Xyster/Application/Service/','prefix'=>$prefix);
        $this->assertAttributeContains($pathEntry, '_paths', $this->broker);
    }

    /**
     * Tests loading a class using its ending name
     *
     */
    public function testGetService()
    {
        $this->broker->addPrefix('Xyster_Application_Service_');
        $svc = $this->broker->getService('SecondExampleService');
        
        $this->assertType('Xyster_Application_Service_SecondExampleService', $svc);
        $this->assertSame($svc, $this->broker->SecondExampleService);
    }

    /**
     * Tests loading a class with underscores
     *
     */
    public function testGetServiceUnderscoreName()
    {
        $this->broker->addPrefix('Xyster_Application_Service_');
        $svc = $this->broker->getService('second_example_service');
        
        $this->assertType('Xyster_Application_Service_SecondExampleService', $svc);
    }
    
    /**
     * Tests loading a class that isn't the right class type
     *
     */
    public function testGetBadService()
    {
        $this->broker->addPrefix('Xyster_Application_Service_');
        try {
            $svc = $this->broker->getService('NotExampleService');
            $this->fail('Exception not thrown');
        } catch ( Xyster_Application_Exception $thrown ) {
            // do nothing
        }
    }

    /**
     * Tests loading a class that isn't there
     *
     */
    public function testGetServiceNotThere()
    {
        try {
            $svc = $this->broker->getService('NotHere!');
            $this->fail('Exception not thrown');
        } catch ( Xyster_Application_Exception $thrown ) {
            // do nothing
        }
    }
    
    /**
     * Tests the 'hasService' method
     *
     */
    public function testHasService()
    {
        $this->assertFalse($this->broker->hasService('ExampleService'));
        
        $this->broker->addService($this->service);
        
        $this->assertTrue($this->broker->hasService('ExampleService'));
        $this->assertSame($this->service, $this->broker->getService('ExampleService'));
    }
    
    /**
     * Tests the 'removeService' method
     *
     */
    public function testRemoveService()
    {
        $this->assertFalse($this->broker->hasService('ExampleService'));
        
        $this->broker->addService($this->service);
        
        $this->assertTrue($this->broker->hasService('ExampleService'));
        $return = $this->broker->removeService('ExampleService');
        $this->assertTrue($return);
        $this->assertFalse($this->broker->hasService('ExampleService'));
        $return = $this->broker->removeService('ExampleService');
        $this->assertFalse($return);
    }

    /**
     * Tests the 'resetServices' method
     * 
     */
    public function testResetServices()
    {
        $this->broker->addService($this->service);
        
        $this->assertAttributeNotEquals(array(), '_services', $this->broker);
        $this->broker->resetServices();
        $this->assertAttributeEquals(array(), '_services', $this->broker);
    }
}

// Call Xyster_Application_Service_BrokerTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Application_Service_BrokerTest::main') {
    Xyster_Application_Service_BrokerTest::main();
}
