<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_Delegating_AbstractTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_Delegating_AbstractTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Empty.php';
require_once 'Xyster/Container/Delegating/Abstract.php';

/**
 * Test class for Xyster_Container_Delegating_Abstract.
 * Generated by PHPUnit on 2008-01-31 at 17:57:22.
 */
class Xyster_Container_Delegating_AbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container_Delegating_Abstract
     */
    protected $object;
    
    /**
     * @var Xyster_Container_Interface
     */
    protected $delegate;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_Delegating_AbstractTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
    	$this->delegate = new Xyster_Container(null, new Xyster_Container_Empty);
        $this->object = new Xyster_Container_Delegating_AbstractImpl($this->delegate);
    }

    /**
     * Tests the 'accept' method
     */
    public function testAccept()
    {
        $this->delegate->addComponentInstance(new ArrayObject);
        require_once 'Xyster/Container/Visitor/Mock.php';
        $visitor = new Xyster_Container_Visitor_Mock;
        $this->object->accept($visitor);
        $this->assertEquals(1, $visitor->getCalled('visitContainer'));
        $this->assertEquals(1, $visitor->getCalled('visitComponentAdapter'));
    }

    /**
     * Tests the 'getComponent' method
     */
    public function testGetComponent()
    {
        $type = new Xyster_Type('SplObjectStorage');
        $this->delegate->addComponent($type, 'objstrg');
        
        $this->assertType('SplObjectStorage', $this->object->getComponent($type));
        $this->assertType('SplObjectStorage', $this->object->getComponent('objstrg'));
        $this->assertNull($this->object->getComponent('nonexist'));
    }

    /**
     * Tests the 'getComponentAdapter' method
     */
    public function testGetComponentAdapter()
    {
        $type = new Xyster_Type('SplObjectStorage');
        $this->delegate->addComponent($type, 'objstrg');
        
        $this->assertType('Xyster_Container_Adapter', $this->object->getComponentAdapter('objstrg'));
    }

    /**
     * Tests the 'getComponentAdapterByType' method
     */
    public function testGetComponentAdapterByType()
    {
        $this->delegate->addComponentInstance(new ArrayObject(array()), 'arrayObj');
        
        $adapter = $this->object->getComponentAdapterByType('ArrayObject');
        $this->assertType('Xyster_Container_Adapter', $adapter);
        
        $adapter = $this->object->getComponentAdapterByType('SplObjectStorage');
        $this->assertNull($adapter);
        
        $this->delegate->addComponentInstance(new ArrayObject(array(123)), 'myArrayObj');
        
        $class = new ReflectionClass('DelegatingAbstractTestObject');
        $member = $class->getMethod('methodInject');
        require_once 'Xyster/Container/NameBinding/Parameter.php';
        $nameBinding = new Xyster_Container_NameBinding_Parameter($member, 0);
        $adapter = $this->object->getComponentAdapterByType('ArrayObject', $nameBinding);
        $this->assertType('Xyster_Container_Adapter', $adapter);
    }

    /**
     * Tests the 'getComponentAdapters' method
     */
    public function testGetComponentAdapters()
    {
        $this->delegate->addComponent('SplObjectStorage');
        
        $return = $this->object->getComponentAdapters();
        
        $this->assertType('Xyster_Collection_List_Interface', $return);
        $this->assertEquals(1, count($return));
        $this->assertType('Xyster_Container_Adapter', $return[0]);
    }

    /**
     * Tests the 'getComponents' method
     */
    public function testGetComponents()
    {
        $this->delegate->addComponent('SplObjectStorage');
        
        $components = $this->object->getComponents();
        $this->assertSame(1, count($components));
        $this->assertType('Xyster_Collection_List_Interface', $components);
        $this->assertType('SplObjectStorage', $components[0]);
    }

    /**
     * Tests the 'getDelegate' method
     */
    public function testGetDelegate()
    {
        $this->assertSame($this->delegate, $this->object->getDelegate());
    }
    
    /**
     * Tests the 'getParent' method
     */
    public function testGetParent()
    {
        $this->assertSame($this->delegate->getParent(), $this->object->getParent());
    }
}

class Xyster_Container_Delegating_AbstractImpl extends Xyster_Container_Delegating_Abstract
{
	
}

class DelegatingAbstractTestObject
{
    public function methodInject( ArrayObject $myArrayObj )
    {
        // do nothing
    }
}

// Call Xyster_Container_Delegating_AbstractTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_Delegating_AbstractTest::main') {
    Xyster_Container_Delegating_AbstractTest::main();
}
