<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_Delegating_MutableAbstractTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_Delegating_MutableAbstractTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Features.php';
require_once 'Xyster/Container/Delegating/MutableAbstract.php';

/**
 * Test class for Xyster_Container_Delegating_MutableAbstract.
 * Generated by PHPUnit on 2008-02-02 at 11:59:04.
 */
class Xyster_Container_Delegating_MutableAbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container_Delegating_MutableAbstract
     */
    protected $object;
    
    /**
     * @var Xyster_Container_Mutable
     */
    protected $delegate;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_Delegating_MutableAbstractTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
    	$this->delegate = new Xyster_Container;
        $this->object = new Xyster_Container_Delegating_MutableAbstractImpl($this->delegate);
    }

    /**
     * Tests the 'addAdapter' method
     */
    public function testAddAdapter()
    {
        require_once 'Xyster/Container/Adapter/Instance.php';
        $key = new Xyster_Type('ArrayObject');
        $adapter = new Xyster_Container_Adapter_Instance($key, new ArrayObject);
        $return = $this->object->addAdapter($adapter);
        $this->assertSame($this->object, $return);
        
        $adapter2 = $this->delegate->getComponentAdapter($key);
        $this->assertSame($adapter, $adapter2);
    }

    /**
     * Tests the 'addComponent' method
     */
    public function testAddComponent()
    {
        $class = new Xyster_Type('Xyster_Collection_Map');
        $return = $this->object->addComponent($class);
        $this->assertSame($this->object, $return);
        
        $adapter = $this->delegate->getComponentAdapterByType($class);
        $this->assertType('Xyster_Container_Adapter', $adapter);
        $this->assertSame($class, $adapter->getKey());
    }

    /**
     * Tests the 'addComponent' method with an instance of an object
     *
     */
    public function testAddComponentInstance()
    {
        $instance = new ArrayObject;
        $return = $this->object->addComponentInstance($instance);
        $this->assertSame($this->object, $return);
        $key = new Xyster_Type('ArrayObject');
        $adapter = $this->delegate->getComponentAdapterByType($key);
        $this->assertType('Xyster_Container_Adapter_Instance', $adapter);
        $this->assertSame($instance, $adapter->getInstance($this->object));
        $this->assertEquals($key, $adapter->getImplementation());
    }

    /**
     * Tests the 'addConfig' method
     *
     */
    public function testAddConfig()
    {
        $key = 'uri';
        $value = 'http://localhost';
        $this->object->addConfig($key, $value);
        $this->assertSame($value, $this->delegate->getComponent('uri'));
    }

    /**
     * Tests the 'change' method
     */
    public function testChange()
    {
        $feature = Xyster_Container_Features::SDI();
        require_once 'Xyster/Collection/Map/String.php';
        $expected = new Xyster_Collection_Map_String($feature);
        $this->object->change($feature);
        $this->assertAttributeEquals($expected, '_properties', $this->delegate);
    }

    /**
     * Tests the 'getDelegate' method
     */
    public function testGetDelegate()
    {
        $this->assertSame($this->delegate, $this->object->getDelegate());
    }

    /**
     * Test the 'removeComponent' method
     */
    public function testRemoveComponent()
    {
        $this->object->addComponent('SplObjectStorage');
        
        $this->assertEquals(1, count($this->delegate->getComponentAdapters()));
        $this->object->removeComponent(new Xyster_Type('SplObjectStorage'));
        $this->assertEquals(0, count($this->delegate->getComponentAdapters()));
    }

    /**
     * Tests the 'removeComponentByInstance' method
     */
    public function testRemoveComponentByInstance()
    {
        $this->object->addComponentInstance(new ArrayObject(array()));
        $this->object->addComponent('SplObjectStorage');
        
        $this->assertEquals(2, count($this->delegate->getComponentAdapters()));
        $this->object->removeComponentByInstance(new SplObjectStorage);
        $this->assertEquals(1, count($this->delegate->getComponentAdapters()));
        
        $this->object->removeComponentByInstance(new ReflectionClass('SplObjectStorage'));
        $this->assertEquals(1, count($this->delegate->getComponentAdapters()));
    }

    /**
     * Tests the 'with' method
     */
    public function testWith()
    {
        $feature = Xyster_Container_Features::CACHE();
        $this->object->with($feature);
        $this->assertAttributeSame($feature, '_with', $this->delegate);
    }
}

class Xyster_Container_Delegating_MutableAbstractImpl extends Xyster_Container_Delegating_MutableAbstract
{
}

// Call Xyster_Container_Delegating_MutableAbstractTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_Delegating_MutableAbstractTest::main') {
    Xyster_Container_Delegating_MutableAbstractTest::main();
}
