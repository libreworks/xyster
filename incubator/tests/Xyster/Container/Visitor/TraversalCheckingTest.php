<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_Visitor_TraversalCheckingTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_Visitor_TraversalCheckingTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Parameter/Basic.php';
require_once 'Xyster/Container/Visitor/TraversalChecking.php';

/**
 * Test class for Xyster_Container_Visitor_TraversalChecking.
 * Generated by PHPUnit on 2008-01-31 at 12:53:36.
 */
class Xyster_Container_Visitor_TraversalCheckingTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container_Visitor_TraversalChecking
     */
    protected $object;
    
    protected $container;
    
    protected $adapter;

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_Visitor_TraversalCheckingTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $this->object = new Xyster_Container_Visitor_TraversalChecking;
        $this->container = new Xyster_Container;
        $this->container->addComponent('SplObjectStorage');
        $this->adapter = $this->container->getComponentAdapterByType('SplObjectStorage');
    }
    
    /**
     * Tests exception thrown when supplying untraversable type
     *
     */
    public function testBadTypeTraversal()
    {
    	$this->setExpectedException('Xyster_Container_Visitor_Exception');
    	$this->object->traverse(new SplObjectStorage);
    }

    /**
     * Tests the 'visitContainer' method
     */
    public function testVisitContainer()
    {
    	$this->object->traverse($this->container);
    }
    
    /**
     * Tests the 'visitContainer' method when expecting an exception
     */
    public function testVisitContainerException()
    {
        $this->setExpectedException('Xyster_Container_Visitor_Exception');
        $this->object->visitContainer($this->container);
    }

    /**
     * Tests the 'visitComponentAdapter' method
     */
    public function testVisitComponentAdapter()
    {
    	$this->object->traverse($this->adapter);
    }
    
    /**
     * Tests the 'visitComponentAdapter' method when expecting an exception
     */
    public function testVisitComponentAdapterException()
    {
        $this->setExpectedException('Xyster_Container_Visitor_Exception');
        $this->object->visitComponentAdapter($this->adapter);
    }
    
    /**
     * Tests the 'visitParameter' method
     */
    public function testVisitParameter()
    {
    	$this->object->traverse(Xyster_Container_Parameter_Basic::standard());
    }
    
    /**
     * Tests the 'visitParameter' method when expecting an exception
     */
    public function testVisitParameterException()
    {
        $this->setExpectedException('Xyster_Container_Visitor_Exception');
        $this->object->visitParameter(Xyster_Container_Parameter_Basic::standard());
    }
}

// Call Xyster_Container_Visitor_TraversalCheckingTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_Visitor_TraversalCheckingTest::main') {
    Xyster_Container_Visitor_TraversalCheckingTest::main();
}
