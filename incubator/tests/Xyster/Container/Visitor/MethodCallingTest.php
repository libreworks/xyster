<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_Visitor_MethodCallingTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_Visitor_MethodCallingTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Features.php';
require_once 'Xyster/Container/Visitor/MethodCalling.php';
require_once dirname(dirname(__FILE__)) . '/_files/Cdi.php';

/**
 * Test class for Xyster_Container_Visitor_MethodCalling.
 * Generated by PHPUnit on 2008-01-31 at 12:11:37.
 */
class Xyster_Container_Visitor_MethodCallingTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container_Visitor_MethodCalling
     */
    protected $object;
    
    protected $container;
    
    protected $method;
    
    protected $args = array('The ocean');

    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_Visitor_MethodCallingTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
    	$this->container = new Xyster_Container;
    	$this->container->addConfig('name', 'Captain Crunch')
            ->addComponent('SubmarineCaptain')
            ->addComponent('SubFuel')
            ->addComponent('ScubaGear')
            ->addComponent('array')
            ->with(Xyster_Container_Features::CACHE())
            ->addComponent('Submarine');
    }

    /**
     * Tests the 'traverse' method
     */
    public function testTraverse()
    {
        $class = new ReflectionClass('Submarine');
        $this->method = $class->getMethod('setLocation');
        $this->object = new Xyster_Container_Visitor_MethodCalling($this->method, $this->args);
        
    	$this->object->traverse($this->container);
        
        $sub = $this->container->getComponent(new Xyster_Type('Submarine'));
        $this->assertAttributeEquals(current($this->args), '_location', $sub);
    }

    /**
     * Tests the 'traverse' method in reverse order
     */
    public function testTraverseReverse()
    {
        $class = new ReflectionClass('Submarine');
        $this->method = $class->getMethod('setLocation');
        $this->object = new Xyster_Container_Visitor_MethodCalling($this->method, $this->args, false);
        
        $this->object->traverse($this->container);
        
        $sub = $this->container->getComponent(new Xyster_Type('Submarine'));
        $this->assertAttributeEquals(current($this->args), '_location', $sub);
    }
    
    /**
     * Tests the 'traverse' method with a reflectionexception
     */
    public function testTraverseReflectionException()
    {
        $class = new ReflectionClass('Submarine');
        $this->method = $class->getMethod('setError');
        $this->object = new Xyster_Container_Visitor_MethodCalling($this->method, $this->args);
    	
        $this->setExpectedException('Xyster_Container_Visitor_Exception');
        $this->object->traverse($this->container);
    }
}

// Call Xyster_Container_Visitor_MethodCallingTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_Visitor_MethodCallingTest::main') {
    Xyster_Container_Visitor_MethodCallingTest::main();
}
