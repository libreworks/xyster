<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';

require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container/Adapter/Instance.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Type.php';

/**
 * Test class for Xyster_Container_Behavior_Abstract.
 * Generated by PHPUnit on 2007-12-30 at 14:19:09.
 */
class Xyster_Container_Behavior_CommonTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Xyster_Container_Behavior_Abstract
     */
    protected $object;
    
    /**
     * @var Xyster_Container_Adapter_Instance
     */
    protected $delegate;
    
    /**
     * @var Xyster_Container
     */
    protected $container;

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        $key = new Xyster_Type('ArrayObject');
        $this->delegate = new Xyster_Container_Adapter_Instance($key, new ArrayObject, null);
        $this->container = new Xyster_Container;
        $this->container->addAdapter($this->delegate);
    }

    /**
     * Tests the 'accept' method
     */
    public function testAccept()
    {
        require_once 'Xyster/Container/Visitor/Mock.php';
        $visitor = new Xyster_Container_Visitor_Mock;
        $this->object->accept($visitor);
        $this->assertEquals(2, $visitor->getCalled('visitComponentAdapter'));
    }

    /**
     * Tests the 'changeMonitor' method
     */
    public function testChangeMonitor()
    {
        $monitor = new Xyster_Container_Monitor_Null;
        $this->object->changeMonitor($monitor);
        $this->assertSame($monitor, $this->object->currentMonitor());
    }

    /**
     * Tests the 'currentMonitor' method
     */
    public function testCurrentMonitor()
    {
        $this->assertSame($this->delegate->currentMonitor(), $this->object->currentMonitor());
    }

    /**
     * Tests the 'getDelegate' method
     */
    public function testGetDelegate()
    {
        $this->assertSame($this->delegate, $this->object->getDelegate());
    }

    /**
     * Tests the 'getImplementation' method
     */
    public function testGetImplementation()
    {
        $this->assertSame($this->delegate->getImplementation(), $this->object->getImplementation());
    }

    /**
     * Tests the 'getInstance' method
     */
    public function testGetInstance()
    {
        $this->assertSame($this->delegate->getInstance($this->container), $this->object->getInstance($this->container));
    }

    /**
     * Tests the 'getKey' method
     */
    public function testGetKey()
    {
        $this->assertSame($this->delegate->getKey(), $this->object->getKey());
    }

    /**
     * Tests the 'verify' method
     */
    public function testVerify()
    {
        $this->object->verify($this->container);
    }

    /**
     * Tests the 'toString' method
     */
    public function test__toString()
    {
        $this->assertSame($this->delegate->__toString(), $this->object->__toString());
    }
}