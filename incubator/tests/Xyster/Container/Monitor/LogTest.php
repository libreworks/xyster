<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_Monitor_LogTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_Monitor_LogTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';
require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container.php';
require_once 'Xyster/Container/Monitor/Log.php';
require_once 'Xyster/Container/Injection/Constructor.php';
require_once 'Zend/Log.php';
require_once 'Zend/Log/Writer/Mock.php';

/**
 * Test class for Xyster_Container_Monitor_Log.
 * Generated by PHPUnit on 2008-01-24 at 16:05:26.
 */
class Xyster_Container_Monitor_LogTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var Xyster_Container
	 */
	protected $container;
	
    /**
     * @var Xyster_Container_Monitor_Log
     */
    protected $object;
    
    /**
     * @var Zend_Log
     */
    protected $log;
    
    /**
     * @var Zend_Log_Writer_Mock
     */
    protected $writer;

    /**
     * Runs the test methods of this class.
     *
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_Monitor_LogTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     *
     */
    protected function setUp()
    {
    	$this->writer = new Zend_Log_Writer_Mock;
    	$this->log = new Zend_Log($this->writer);
        $this->object = new Xyster_Container_Monitor_Log($this->log);
        $this->container = new Xyster_Container;
    }

    /**
     * Tests the 'changeMonitor' method
     *
     */
    public function testChangeMonitor()
    {
    	$monitor = new Xyster_Container_Monitor_Null;
    	$this->object->changeMonitor($monitor);
    	$this->assertAttributeSame($monitor, '_delegate', $this->object);
    }
    
    /**
     * Tests the 'changeMonitor' method with a delegate 
     *
     */
    public function testChangeMonitorDelegate()
    {
    	$monitor = new Xyster_Container_Monitor_Log(new Zend_Log);
    	$this->object->changeMonitor($monitor);
    	
    	$newMonitor = new Xyster_Container_Monitor_Null;
    	$this->object->changeMonitor($newMonitor);
    	$this->assertSame($newMonitor, $monitor->currentMonitor());
    }
    
    /**
     * Tests the 'currentMonitor' method
     *
     */
    public function testCurrentMonitor()
    {
    	$monitor = new Xyster_Container_Monitor_Null;
        $this->object->changeMonitor($monitor);
        $this->assertSame($monitor, $this->object->currentMonitor());
    }
    
    /**
     * Tests the 'instantiating' method
     */
    public function testInstantiating()
    {
    	$events = $this->writer->events;
        $this->assertEquals(0, count($events));
        
    	$type = new Xyster_Type('Xyster_Container_Monitor_LogTest_ComponentStub');
    	$adapter = new Xyster_Container_Injection_Constructor($type, $type);
    	$this->object->instantiating($this->container, $adapter, $type);
    	
    	$events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: instantiating ' . $type, $events[0]);
    }

    /**
     * Tests the 'instantiated' method
     */
    public function testInstantiated()
    {
        $events = $this->writer->events;
        $this->assertEquals(0, count($events));
        
        $type = new Xyster_Type('Xyster_Container_Monitor_LogTest_ComponentStub');
        $adapter = new Xyster_Container_Injection_Constructor($type, $type);
        $storage = new SplObjectStorage;
        $instance = new Xyster_Container_Monitor_LogTest_ComponentStub($storage);
        $injected = array($storage);
        $duration = 0.00123;
        $this->object->instantiated($this->container, $adapter, $type, $instance, $injected, $duration);
        
        $events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: instantiated ' . $type . ' [' . $duration . ' ms] injected [SplObjectStorage]', $events[0]);
    }

    /**
     * Tests the 'instantiationFailed' method
     */
    public function testInstantiationFailed()
    {
    	$events = $this->writer->events;
        $this->assertEquals(0, count($events));
        
        $type = new Xyster_Type('Xyster_Container_Monitor_LogTest_ComponentStub');
        $adapter = new Xyster_Container_Injection_Constructor($type, $type);
        $exception = new RuntimeException('Example message');
    	$this->object->instantiationFailed($this->container, $adapter, $type, $exception);
    	
        $events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: instantiation failed: ' . $type . ', reason: Example message', $events[0]);
    }

    /**
     * Tests the 'invoking' method
     */
    public function testInvoking()
    {
    	$events = $this->writer->events;
        $this->assertEquals(0, count($events));
        
        $type = new Xyster_Type('Xyster_Container_Monitor_LogTest_ComponentStub');
        $adapter = new Xyster_Container_Injection_Constructor($type, $type);
        $storage = new SplObjectStorage;
        $instance = new Xyster_Container_Monitor_LogTest_ComponentStub($storage);
        $member = $type->getClass()->getMethod('inject');
    	$this->object->invoking($this->container, $adapter, $member, $instance);
    	
        $events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: invoking ' . $member . ' on ' . $type->getName(), $events[0]);
    }

    /**
     * Tests the 'invoked' method
     */
    public function testInvoked()
    {
        $events = $this->writer->events;
        $this->assertEquals(0, count($events));
        
        $type = new Xyster_Type('Xyster_Container_Monitor_LogTest_ComponentStub');
        $adapter = new Xyster_Container_Injection_Constructor($type, $type);
        $storage = new SplObjectStorage;
        $instance = new Xyster_Container_Monitor_LogTest_ComponentStub($storage);
        $member = $type->getClass()->getMethod('inject');
        $duration = 0.00123;
        
        $this->object->invoked($this->container, $adapter, $member, $instance, $duration);
        
        $events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: invoked ' . $member . ' on ' . $type->getName() . ' [' . $duration . ' ms]', $events[0]);
    }
    
    /**
     * Tests the 'invocationFailed' method
     */
    public function testInvocationFailed()
    {
    	$events = $this->writer->events;
        $this->assertEquals(0, count($events));
        
        $type = new Xyster_Type('Xyster_Container_Monitor_LogTest_ComponentStub');
        $adapter = new Xyster_Container_Injection_Constructor($type, $type);
        $storage = new SplObjectStorage;
        $instance = new Xyster_Container_Monitor_LogTest_ComponentStub($storage);
        $member = $type->getClass()->getMethod('inject');
        $exception = new RuntimeException('Example InvocationFailed');
        
    	$this->object->invocationFailed($member, $instance, $exception);
    	
        $events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: invocation failed: ' . $member . ' on ' . $type->getName() . ', reason: Example InvocationFailed', $events[0]);
    }

    /**
     * Tests the 'newInjectionFactory' method
     *
     */
    public function testNewInjectionFactory()
    {
        $this->markTestIncomplete();
    }
    
    /**
     * Tests the 'noComponentFound' method
     */
    public function testNoComponentFound()
    {
    	$events = $this->writer->events;
    	$this->assertEquals(0, count($events));
    	
    	$key = 'abc123';
    	$this->object->noComponentFound($this->container, $key);
    	
        $events = $this->writer->events;
        $this->assertEquals(1, count($events));
        $this->assertContains('Xyster_Container: No component for key: abc123', $events[0]);
    }
}

class Xyster_Container_Monitor_LogTest_ComponentStub
{
	public function __construct( SplObjectStorage $storage )
	{
		
	}
	
	public function inject( SplObjectStorage $storage )
	{
		
	}
}

// Call Xyster_Container_Monitor_LogTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_Monitor_LogTest::main') {
    Xyster_Container_Monitor_LogTest::main();
}
