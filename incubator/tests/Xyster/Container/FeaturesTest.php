<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_FeaturesTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_FeaturesTest::main');
}

require_once dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'TestHelper.php';

require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container/Features.php';

/**
 * Test class for Xyster_Container_Features.
 * Generated by PHPUnit on 2007-12-30 at 19:01:09.
 */
class Xyster_Container_FeaturesTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_FeaturesTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * @todo Implement testCDI().
     */
    public function testCDI()
    {
        $this->_testFeature(Xyster_Container_Features::CDI(), 'injection', 'constructor');
    }

    /**
     * @todo Implement testSDI().
     */
    public function testSDI()
    {
        $this->_testFeature(Xyster_Container_Features::SDI(), 'injection', 'setter');
    }

    /**
     * @todo Implement testMETHOD_INJECTION().
     */
    public function testMETHOD_INJECTION()
    {
        $this->_testFeature(Xyster_Container_Features::METHOD_INJECTION(), 'injection', 'method');
    }

    /**
     * @todo Implement testNO_CACHE().
     */
    public function testNO_CACHE()
    {
        $this->_testFeature(Xyster_Container_Features::NO_CACHE(), 'cache', 'false');
    }

    /**
     * @todo Implement testCACHE().
     */
    public function testCACHE()
    {
        $this->_testFeature(Xyster_Container_Features::CACHE(), 'cache', 'true');
    }

    /**
     * @todo Implement testSINGLE().
     */
    public function testSINGLE()
    {
        $this->_testFeature(Xyster_Container_Features::SINGLE(), 'cache', 'true');
    }

    /**
     * @todo Implement testNONE().
     */
    public function testNONE()
    {
        $this->_testFeature(Xyster_Container_Features::NONE(), 'none', '');
    }

    /**
     * @todo Implement testPROPERTY_APPLYING().
     */
    public function testPROPERTY_APPLYING()
    {
        $this->_testFeature(Xyster_Container_Features::PROPERTY_APPLYING(), 'property-applying', 'true');
    }

    /**
     * @todo Implement testAUTOMATIC().
     */
    public function testAUTOMATIC()
    {
        $this->_testFeature(Xyster_Container_Features::AUTOMATIC(), 'automatic', 'true');
    }
    
    /**
     * Tests a feature
     *
     * @param mixed $map
     * @param string $key
     * @param string $value
     */
    protected function _testFeature( $map, $key, $value )
    {
        $this->assertType('Xyster_Collection_Map_Interface', $map);
        $this->assertTrue($map->offsetExists($key));
        $this->assertEquals($value, $map[$key]);
    }
}

// Call Xyster_Container_FeaturesTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_FeaturesTest::main') {
    Xyster_Container_FeaturesTest::main();
}
