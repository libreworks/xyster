<?php
/**
 * Xyster Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * @category  Xyster
 * @package   UnitTests
 * @subpackage Xyster_Container
 * @copyright Copyright (c) 2007-2008 Irrational Logic (http://irrationallogic.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD License
 * @version   $Id$
 */

// Call Xyster_Container_Injection_ConstructorTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'Xyster_Container_Injection_ConstructorTest::main');
}

require_once dirname(dirname(dirname(dirname(__FILE__)))) . DIRECTORY_SEPARATOR . 'TestHelper.php';

require_once 'PHPUnit/Framework.php';
require_once 'Xyster/Container/Injection/Constructor.php';
require_once dirname(dirname(__FILE__)) . '/_files/Cdi.php';

/**
 * Test class for Xyster_Container_Injection_Constructor.
 * Generated by PHPUnit on 2007-12-30 at 15:41:59.
 */
class Xyster_Container_Injection_ConstructorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Xyster_Container_Injection_Constructor
     */
    protected $object;

    protected $container;
    
    protected $key;
    
    /**
     * Runs the test methods of this class.
     *
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Xyster_Container_Injection_ConstructorTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture
     */
    protected function setUp()
    {
        require_once 'Xyster/Container.php';
        $this->container = new Xyster_Container;
        require_once 'Xyster/Type.php';
        $this->key = new Xyster_Type('Submarine');
        $this->container->addConfig('name', 'Captain Crunch')
            ->addComponent('SubmarineCaptain')
            ->addComponent('SubFuel')
            ->addComponent('ScubaGear')
            ->addComponent('array');
        require_once 'Xyster/Container/Parameter/Basic.php';
        $param = Xyster_Container_Parameter_Basic::standard();
        $this->object = new Xyster_Container_Injection_Constructor($this->key,
            $this->key, array($param, $param, $param));
    }
    
    /**
     * Tests the 'accept' method
     */
    public function testAccept()
    {
        require_once 'Xyster/Container/Visitor/Mock.php';
        $visitor = new Xyster_Container_Visitor_Mock;
        $this->object->accept($visitor);
        $this->assertEquals(1, $visitor->getCalled('visitComponentAdapter'));
    }
    
    /**
     * Tests the 'decorateInstance' method
     */
    public function testDecorateInstance()
    {
        // does nothing, just for code completion
        $this->object->decorateInstance($this->container, $this->key, null);
    }
    
    /**
     * Tests the 'getInstance' method
     */
    public function testGetInstance()
    {
        $inst = $this->object->getInstance($this->container);
        $this->assertType('Submarine', $inst);
    }

    /**
     * Tests the 'verify' method
     */
    public function testVerify()
    {
        $this->object->verify($this->container);
    }

    /**
     * Tests the 'toString' method
     */
    public function test__toString()
    {
        $this->assertSame('ConstructorInjector-Class Submarine', $this->object->__toString());
    }
    
    /**
     * Tests an exception thrown for a construction problem
     *
     */
    public function testBadConstruct()
    {
        $key = new Xyster_Type('SeaUrchin');
        $container = new Xyster_Container;
        $inj = new Xyster_Container_Injection_Constructor($key, $key);
        $this->setExpectedException('Xyster_Container_Exception');
        $inj->getInstance($container);
    }
}

// Call Xyster_Container_Injection_ConstructorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Xyster_Container_Injection_ConstructorTest::main') {
    Xyster_Container_Injection_ConstructorTest::main();
}
